
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import Errores.Exception_;
import java.util.ArrayList;
import java.util.HashMap;
import Graficas.Graficas;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\003\000\002\017" +
    "\003\000\002\017\003\000\002\053\002\000\002\017\012" +
    "\000\002\017\004\000\002\003\004\000\002\003\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\007\006\000\002" +
    "\006\010\000\002\010\004\000\002\033\005\000\002\054" +
    "\002\000\002\014\012\000\002\055\002\000\002\034\014" +
    "\000\002\056\002\000\002\035\025\000\002\057\002\000" +
    "\002\012\012\000\002\060\002\000\002\021\006\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\061" +
    "\002\000\002\023\006\000\002\062\002\000\002\024\012" +
    "\000\002\026\005\000\002\025\005\000\002\025\004\000" +
    "\002\063\002\000\002\025\006\000\002\037\004\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\005" +
    "\000\002\016\005\000\002\016\004\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\004\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\027" +
    "\005\000\002\030\003\000\002\030\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\040\011\000" +
    "\002\045\004\000\002\045\005\000\002\044\006\000\002" +
    "\044\006\000\002\044\006\000\002\044\006\000\002\044" +
    "\006\000\002\043\011\000\002\046\004\000\002\046\005" +
    "\000\002\047\011\000\002\047\006\000\002\047\011\000" +
    "\002\047\006\000\002\047\006\000\002\050\003\000\002" +
    "\050\005\000\002\050\003\000\002\050\005\000\002\050" +
    "\003\000\002\050\005\000\002\050\003\000\002\050\005" +
    "\000\002\051\012\000\002\052\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\010\003\006\026\010\027\012\001\002\000" +
    "\004\002\u0116\001\002\000\004\002\uffff\001\002\000\004" +
    "\030\u0115\001\002\000\004\002\ufffe\001\002\000\004\025" +
    "\025\001\002\000\004\002\000\001\002\000\004\021\015" +
    "\001\002\000\004\030\024\001\002\000\006\030\uffa3\063" +
    "\022\001\002\000\004\067\016\001\002\000\010\015\021" +
    "\016\017\021\020\001\002\000\006\030\uffa0\063\uffa0\001" +
    "\002\000\006\030\uffa1\063\uffa1\001\002\000\006\030\uff9f" +
    "\063\uff9f\001\002\000\004\021\015\001\002\000\004\030" +
    "\uffa2\001\002\000\004\002\uffa4\001\002\000\004\005\026" +
    "\001\002\000\004\006\ufffd\001\002\000\004\006\030\001" +
    "\002\000\004\027\031\001\002\000\044\020\042\024\047" +
    "\026\074\031\050\033\066\056\040\060\065\061\035\064" +
    "\032\066\061\071\071\072\073\074\037\075\056\076\036" +
    "\077\060\100\054\001\002\000\004\005\u0104\001\002\000" +
    "\052\020\ufff1\024\ufff1\026\ufff1\030\ufff1\031\ufff1\033\ufff1" +
    "\056\ufff1\060\ufff1\061\ufff1\064\ufff1\065\ufff1\066\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1" +
    "\100\ufff1\001\002\000\046\020\042\024\047\026\074\030" +
    "\u0103\031\050\033\066\056\040\060\065\061\035\064\032" +
    "\066\061\071\071\072\073\074\037\075\056\076\036\077" +
    "\060\100\054\001\002\000\030\005\uffc8\012\uffc8\015\uffc8" +
    "\016\uffc8\021\uffc8\031\uffc8\060\uffc8\061\uffc8\062\uffc8\073" +
    "\uffc8\076\uffc8\001\002\000\030\005\uffcb\012\uffcb\015\uffcb" +
    "\016\uffcb\021\uffcb\031\uffcb\060\uffcb\061\uffcb\062\uffcb\073" +
    "\uffcb\076\uffcb\001\002\000\030\005\uffcd\012\uffcd\015\uffcd" +
    "\016\uffcd\021\uffcd\031\uffcd\060\uffcd\061\uffcd\062\uffcd\073" +
    "\uffcd\076\uffcd\001\002\000\004\005\374\001\002\000\054" +
    "\020\ufff5\024\ufff5\026\ufff5\030\ufff5\031\ufff5\033\ufff5\056" +
    "\ufff5\057\362\060\ufff5\061\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\074\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\001\002\000\032\005\uffce\007\357\012\uffce" +
    "\015\uffce\016\uffce\021\uffce\031\uffce\060\uffce\061\uffce\062" +
    "\uffce\073\uffce\076\uffce\001\002\000\030\005\255\012\254" +
    "\015\256\016\253\021\252\031\263\060\270\061\262\062" +
    "\266\073\267\076\261\001\002\000\004\004\355\001\002" +
    "\000\052\020\ufff9\024\ufff9\026\ufff9\030\ufff9\031\ufff9\033" +
    "\ufff9\056\ufff9\060\ufff9\061\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\070\ufff9\071\ufff9\072\ufff9\074\ufff9\075\ufff9\076\ufff9\077" +
    "\ufff9\100\ufff9\001\002\000\052\020\uffee\024\uffee\026\uffee" +
    "\030\uffee\031\uffee\033\uffee\056\uffee\060\uffee\061\uffee\064" +
    "\uffee\065\uffee\066\uffee\070\uffee\071\uffee\072\uffee\074\uffee" +
    "\075\uffee\076\uffee\077\uffee\100\uffee\001\002\000\004\023" +
    "\350\001\002\000\004\032\346\001\002\000\052\020\uffed" +
    "\024\uffed\026\uffed\030\uffed\031\uffed\033\uffed\056\uffed\060" +
    "\uffed\061\uffed\064\uffed\065\uffed\066\uffed\070\uffed\071\uffed" +
    "\072\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed\001" +
    "\002\000\052\020\ufff3\024\ufff3\026\ufff3\030\ufff3\031\ufff3" +
    "\033\ufff3\056\ufff3\060\ufff3\061\ufff3\064\ufff3\065\ufff3\066" +
    "\ufff3\070\ufff3\071\ufff3\072\ufff3\074\ufff3\075\ufff3\076\ufff3" +
    "\077\ufff3\100\ufff3\001\002\000\052\020\uffeb\024\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\033\uffeb\056\uffeb\060\uffeb\061\uffeb" +
    "\064\uffeb\065\uffeb\066\uffeb\070\uffeb\071\uffeb\072\uffeb\074" +
    "\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\001\002\000\030" +
    "\005\uffc7\012\uffc7\015\uffc7\016\uffc7\021\uffc7\031\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\073\uffc7\076\uffc7\001\002\000\004" +
    "\004\345\001\002\000\030\005\uffcc\012\uffcc\015\uffcc\016" +
    "\uffcc\021\uffcc\031\uffcc\060\uffcc\061\uffcc\062\uffcc\073\uffcc" +
    "\076\uffcc\001\002\000\004\004\344\001\002\000\030\005" +
    "\uffca\012\uffca\015\uffca\016\uffca\021\uffca\031\uffca\060\uffca" +
    "\061\uffca\062\uffca\073\uffca\076\uffca\001\002\000\004\004" +
    "\343\001\002\000\052\020\uffef\024\uffef\026\uffef\030\uffef" +
    "\031\uffef\033\uffef\056\uffef\060\uffef\061\uffef\064\uffef\065" +
    "\uffef\066\uffef\070\uffef\071\uffef\072\uffef\074\uffef\075\uffef" +
    "\076\uffef\077\uffef\100\uffef\001\002\000\004\004\342\001" +
    "\002\000\052\020\uffea\024\uffea\026\uffea\030\uffea\031\uffea" +
    "\033\uffea\056\uffea\060\uffea\061\uffea\064\uffea\065\uffea\066" +
    "\uffea\070\uffea\071\uffea\072\uffea\074\uffea\075\uffea\076\uffea" +
    "\077\uffea\100\uffea\001\002\000\030\005\uffc9\012\uffc9\015" +
    "\uffc9\016\uffc9\021\uffc9\031\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\073\uffc9\076\uffc9\001\002\000\004\005\333\001\002\000" +
    "\052\020\ufff4\024\ufff4\026\ufff4\030\ufff4\031\ufff4\033\ufff4" +
    "\056\ufff4\060\ufff4\061\ufff4\064\ufff4\065\ufff4\066\ufff4\070" +
    "\ufff4\071\ufff4\072\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4" +
    "\100\ufff4\001\002\000\052\020\ufff2\024\ufff2\026\ufff2\030" +
    "\ufff2\031\ufff2\033\ufff2\056\ufff2\060\ufff2\061\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\070\ufff2\071\ufff2\072\ufff2\074\ufff2\075" +
    "\ufff2\076\ufff2\077\ufff2\100\ufff2\001\002\000\004\027\244" +
    "\001\002\000\052\020\uffec\024\uffec\026\uffec\030\uffec\031" +
    "\uffec\033\uffec\056\uffec\060\uffec\061\uffec\064\uffec\065\uffec" +
    "\066\uffec\070\uffec\071\uffec\072\uffec\074\uffec\075\uffec\076" +
    "\uffec\077\uffec\100\uffec\001\002\000\004\005\213\001\002" +
    "\000\010\034\075\036\077\043\076\001\002\000\004\005" +
    "\170\001\002\000\004\005\163\001\002\000\004\005\100" +
    "\001\002\000\004\006\101\001\002\000\004\027\102\001" +
    "\002\000\006\077\105\100\106\001\002\000\004\004\161" +
    "\001\002\000\004\030\160\001\002\000\012\037\144\040" +
    "\143\041\141\042\142\001\002\000\004\037\107\001\002" +
    "\000\004\031\110\001\002\000\004\032\111\001\002\000" +
    "\004\027\112\001\002\000\012\016\116\021\120\031\113" +
    "\044\117\001\002\000\010\004\uff8e\030\uff8e\063\137\001" +
    "\002\000\010\004\uff88\030\uff88\063\135\001\002\000\004" +
    "\030\134\001\002\000\010\004\uff8c\030\uff8c\063\132\001" +
    "\002\000\004\027\123\001\002\000\010\004\uff8a\030\uff8a" +
    "\063\121\001\002\000\012\016\116\021\120\031\113\044" +
    "\117\001\002\000\006\004\uff89\030\uff89\001\002\000\004" +
    "\045\124\001\002\000\004\063\125\001\002\000\004\021" +
    "\126\001\002\000\004\063\127\001\002\000\004\021\130" +
    "\001\002\000\004\030\131\001\002\000\010\004\uff86\030" +
    "\uff86\063\uff86\001\002\000\012\016\116\021\120\031\113" +
    "\044\117\001\002\000\006\004\uff8b\030\uff8b\001\002\000" +
    "\004\004\uff91\001\002\000\012\016\116\021\120\031\113" +
    "\044\117\001\002\000\006\004\uff87\030\uff87\001\002\000" +
    "\012\016\116\021\120\031\113\044\117\001\002\000\006" +
    "\004\uff8d\030\uff8d\001\002\000\004\032\156\001\002\000" +
    "\004\032\154\001\002\000\004\032\152\001\002\000\004" +
    "\031\145\001\002\000\004\032\146\001\002\000\004\027" +
    "\147\001\002\000\012\016\116\021\120\031\113\044\117" +
    "\001\002\000\004\030\151\001\002\000\004\004\uff93\001" +
    "\002\000\012\016\116\021\120\031\113\044\117\001\002" +
    "\000\004\004\uff92\001\002\000\012\016\116\021\120\031" +
    "\113\044\117\001\002\000\004\004\uff8f\001\002\000\012" +
    "\016\116\021\120\031\113\044\117\001\002\000\004\004" +
    "\uff90\001\002\000\052\020\uff96\024\uff96\026\uff96\030\uff96" +
    "\031\uff96\033\uff96\056\uff96\060\uff96\061\uff96\064\uff96\065" +
    "\uff96\066\uff96\070\uff96\071\uff96\072\uff96\074\uff96\075\uff96" +
    "\076\uff96\077\uff96\100\uff96\001\002\000\010\030\uff95\077" +
    "\105\100\106\001\002\000\004\030\uff94\001\002\000\004" +
    "\006\164\001\002\000\004\027\165\001\002\000\006\077" +
    "\105\100\106\001\002\000\004\030\167\001\002\000\052" +
    "\020\uff85\024\uff85\026\uff85\030\uff85\031\uff85\033\uff85\056" +
    "\uff85\060\uff85\061\uff85\064\uff85\065\uff85\066\uff85\070\uff85" +
    "\071\uff85\072\uff85\074\uff85\075\uff85\076\uff85\077\uff85\100" +
    "\uff85\001\002\000\004\006\171\001\002\000\004\027\172" +
    "\001\002\000\006\077\174\100\176\001\002\000\004\004" +
    "\211\001\002\000\004\031\205\001\002\000\004\030\204" +
    "\001\002\000\004\031\177\001\002\000\004\032\200\001" +
    "\002\000\010\015\203\016\202\044\117\001\002\000\004" +
    "\004\uff98\001\002\000\004\004\uff9b\001\002\000\004\004" +
    "\uff99\001\002\000\052\020\uff9e\024\uff9e\026\uff9e\030\uff9e" +
    "\031\uff9e\033\uff9e\056\uff9e\060\uff9e\061\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\070\uff9e\071\uff9e\072\uff9e\074\uff9e\075\uff9e" +
    "\076\uff9e\077\uff9e\100\uff9e\001\002\000\004\032\206\001" +
    "\002\000\006\021\210\044\117\001\002\000\004\004\uff97" +
    "\001\002\000\004\004\uff9a\001\002\000\010\030\uff9d\077" +
    "\174\100\176\001\002\000\004\030\uff9c\001\002\000\004" +
    "\074\214\001\002\000\004\031\215\001\002\000\016\032" +
    "\220\047\217\050\216\051\222\052\223\053\221\001\002" +
    "\000\004\015\uffa9\001\002\000\004\015\uffa8\001\002\000" +
    "\004\015\uffaa\001\002\000\004\015\uffa5\001\002\000\004" +
    "\015\uffa7\001\002\000\004\015\uffa6\001\002\000\004\015" +
    "\225\001\002\000\004\004\226\001\002\000\004\031\227" +
    "\001\002\000\016\032\220\047\217\050\216\051\222\052" +
    "\223\053\221\001\002\000\004\015\231\001\002\000\004" +
    "\004\232\001\002\000\004\031\233\001\002\000\004\011" +
    "\234\001\002\000\004\011\235\001\002\000\004\006\236" +
    "\001\002\000\004\027\237\001\002\000\044\020\uffe1\024" +
    "\uffe1\026\uffe1\031\uffe1\033\uffe1\056\uffe1\060\uffe1\061\uffe1" +
    "\064\uffe1\066\uffe1\071\uffe1\072\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\100\uffe1\001\002\000\044\020\042\024\047" +
    "\026\074\031\050\033\066\056\040\060\065\061\035\064" +
    "\032\066\061\071\071\072\073\074\037\075\056\076\036" +
    "\077\060\100\054\001\002\000\046\020\042\024\047\026" +
    "\074\030\243\031\050\033\066\056\040\060\065\061\035" +
    "\064\032\066\061\071\071\072\073\074\037\075\056\076" +
    "\036\077\060\100\054\001\002\000\052\020\ufffa\024\ufffa" +
    "\026\ufffa\030\ufffa\031\ufffa\033\ufffa\056\ufffa\060\ufffa\061" +
    "\ufffa\064\ufffa\065\ufffa\066\ufffa\070\ufffa\071\ufffa\072\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\001\002\000" +
    "\052\020\uffe0\024\uffe0\026\uffe0\030\uffe0\031\uffe0\033\uffe0" +
    "\056\uffe0\060\uffe0\061\uffe0\064\uffe0\065\uffe0\066\uffe0\070" +
    "\uffe0\071\uffe0\072\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0" +
    "\100\uffe0\001\002\000\044\020\uffe3\024\uffe3\026\uffe3\031" +
    "\uffe3\033\uffe3\056\uffe3\060\uffe3\061\uffe3\064\uffe3\066\uffe3" +
    "\071\uffe3\072\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100" +
    "\uffe3\001\002\000\044\020\042\024\047\026\074\031\050" +
    "\033\066\056\040\060\065\061\035\064\032\066\061\071" +
    "\071\072\073\074\037\075\056\076\036\077\060\100\054" +
    "\001\002\000\046\020\042\024\047\026\074\030\247\031" +
    "\050\033\066\056\040\060\065\061\035\064\032\066\061" +
    "\071\071\072\073\074\037\075\056\076\036\077\060\100" +
    "\054\001\002\000\004\056\250\001\002\000\004\005\251" +
    "\001\002\000\030\005\255\012\254\015\256\016\253\021" +
    "\252\031\263\060\270\061\262\062\266\073\267\076\261" +
    "\001\002\000\046\004\uffbd\006\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\032\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\063\uffbd\067" +
    "\uffbd\001\002\000\046\004\uffc3\006\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\032\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\063\uffc3" +
    "\067\uffc3\001\002\000\030\005\255\012\254\015\256\016" +
    "\253\021\252\031\263\060\270\061\262\062\266\073\267" +
    "\076\261\001\002\000\030\005\255\012\254\015\256\016" +
    "\253\021\252\031\263\060\270\061\262\062\266\073\267" +
    "\076\261\001\002\000\046\004\uffc4\006\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\032\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\063" +
    "\uffc4\067\uffc4\001\002\000\046\004\uffc5\006\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\032\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\063\uffc5\067\uffc5\001\002\000\040\006\326\011\300\012" +
    "\274\013\277\014\302\032\304\046\273\047\301\050\275" +
    "\051\307\052\276\053\305\054\306\055\272\063\303\001" +
    "\002\000\046\004\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\032\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\063\uffc2\067\uffc2" +
    "\001\002\000\046\004\uffbe\006\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\032\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\063\uffbe\067" +
    "\uffbe\001\002\000\046\004\uffc0\006\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\032\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\063\uffc0" +
    "\067\uffc0\001\002\000\046\004\uffc1\006\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\032\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\063" +
    "\uffc1\067\uffc1\001\002\000\046\004\uffc6\006\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\032\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\063\uffc6\067\uffc6\001\002\000\030\005\255\012\254\015" +
    "\256\016\253\021\252\031\263\060\270\061\262\062\266" +
    "\073\267\076\261\001\002\000\046\004\uffbc\006\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\032\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\063\uffbc\067\uffbc\001\002\000\046\004\uffbf\006\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\032\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\063\uffbf\067\uffbf\001\002\000\046\004\uffab\006" +
    "\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\032\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\063\uffab\067\uffab\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\030\005\255" +
    "\012\254\015\256\016\253\021\252\031\263\060\270\061" +
    "\262\062\266\073\267\076\261\001\002\000\046\004\uffb1" +
    "\006\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\032" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\063\uffb1\067\uffb1\001\002\000\046\004" +
    "\uffad\006\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\032\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\063\uffad\067\uffad\001\002\000\046" +
    "\004\uffae\006\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014" +
    "\uffae\032\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\063\uffae\067\uffae\001\002\000" +
    "\046\004\uffb4\006\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\032\uffb4\046\273\047\301\050\275\051\307\052" +
    "\276\053\305\054\306\055\272\063\303\067\uffb4\001\002" +
    "\000\046\004\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\032\uffb8\046\273\047\301\050\275\051\307" +
    "\052\276\053\305\054\306\055\272\063\303\067\uffb8\001" +
    "\002\000\046\004\uffb5\006\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\032\304\046\273\047\301\050\275\051" +
    "\307\052\276\053\305\054\306\055\272\063\303\067\uffb5" +
    "\001\002\000\046\004\uffb0\006\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\032\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\063\uffb0\067" +
    "\uffb0\001\002\000\046\004\uffba\006\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\277\014\302\032\304\046\273\047\301\050" +
    "\275\051\307\052\276\053\305\054\306\055\272\063\303" +
    "\067\uffba\001\002\000\046\004\uffb6\006\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\032\304\046\273\047\301" +
    "\050\275\051\307\052\276\053\305\054\306\055\272\063" +
    "\303\067\uffb6\001\002\000\046\004\uffaf\006\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\032\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\063\uffaf\067\uffaf\001\002\000\046\004\uffb2\006\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\032\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\063\uffb2\067\uffb2\001\002\000\046\004\uffb7\006\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\277\014\302\032\304\046" +
    "\273\047\301\050\275\051\307\052\276\053\305\054\306" +
    "\055\272\063\303\067\uffb7\001\002\000\046\004\uffb3\006" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\032\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\063\uffb3\067\uffb3\001\002\000\046\004\uffac" +
    "\006\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\032" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\063\uffac\067\uffac\001\002\000\004\004" +
    "\327\001\002\000\052\020\uffe2\024\uffe2\026\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\056\uffe2\060\uffe2\061\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\070\uffe2\071\uffe2\072\uffe2\074\uffe2\075\uffe2" +
    "\076\uffe2\077\uffe2\100\uffe2\001\002\000\040\006\331\011" +
    "\300\012\274\013\277\014\302\032\304\046\273\047\301" +
    "\050\275\051\307\052\276\053\305\054\306\055\272\063" +
    "\303\001\002\000\046\004\uffbb\006\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\032\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\063\uffbb" +
    "\067\uffbb\001\002\000\046\004\uffb9\006\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\032\uffb9\046\273\047\301" +
    "\050\275\051\307\052\276\053\305\054\306\055\272\063" +
    "\303\067\uffb9\001\002\000\030\005\255\012\254\015\256" +
    "\016\253\021\252\031\263\060\270\061\262\062\266\073" +
    "\267\076\261\001\002\000\040\006\335\011\300\012\274" +
    "\013\277\014\302\032\304\046\273\047\301\050\275\051" +
    "\307\052\276\053\305\054\306\055\272\063\303\001\002" +
    "\000\004\027\336\001\002\000\044\020\uffdf\024\uffdf\026" +
    "\uffdf\031\uffdf\033\uffdf\056\uffdf\060\uffdf\061\uffdf\064\uffdf" +
    "\066\uffdf\071\uffdf\072\uffdf\074\uffdf\075\uffdf\076\uffdf\077" +
    "\uffdf\100\uffdf\001\002\000\044\020\042\024\047\026\074" +
    "\031\050\033\066\056\040\060\065\061\035\064\032\066" +
    "\061\071\071\072\073\074\037\075\056\076\036\077\060" +
    "\100\054\001\002\000\046\020\042\024\047\026\074\030" +
    "\341\031\050\033\066\056\040\060\065\061\035\064\032" +
    "\066\061\071\071\072\073\074\037\075\056\076\036\077" +
    "\060\100\054\001\002\000\054\020\uffde\024\uffde\026\uffde" +
    "\030\uffde\031\uffde\033\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\064\uffde\065\uffde\066\uffde\070\uffde\071\uffde\072\uffde" +
    "\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\001\002\000" +
    "\052\020\ufff0\024\ufff0\026\ufff0\030\ufff0\031\ufff0\033\ufff0" +
    "\056\ufff0\060\ufff0\061\ufff0\064\ufff0\065\ufff0\066\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0" +
    "\100\ufff0\001\002\000\052\020\uffcf\024\uffcf\026\uffcf\030" +
    "\uffcf\031\uffcf\033\uffcf\056\uffcf\060\uffcf\061\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\070\uffcf\071\uffcf\072\uffcf\074\uffcf\075" +
    "\uffcf\076\uffcf\077\uffcf\100\uffcf\001\002\000\052\020\ufff8" +
    "\024\ufff8\026\ufff8\030\ufff8\031\ufff8\033\ufff8\056\ufff8\060" +
    "\ufff8\061\ufff8\064\ufff8\065\ufff8\066\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\001" +
    "\002\000\052\020\ufff6\024\ufff6\026\ufff6\030\ufff6\031\ufff6" +
    "\033\ufff6\056\ufff6\060\ufff6\061\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\070\ufff6\071\ufff6\072\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\077\ufff6\100\ufff6\001\002\000\030\005\255\012\254\015" +
    "\256\016\253\021\252\031\263\060\270\061\262\062\266" +
    "\073\267\076\261\001\002\000\040\004\uffe6\011\300\012" +
    "\274\013\277\014\302\032\304\046\273\047\301\050\275" +
    "\051\307\052\276\053\305\054\306\055\272\063\303\001" +
    "\002\000\004\022\351\001\002\000\004\005\352\001\002" +
    "\000\030\005\255\012\254\015\256\016\253\021\252\031" +
    "\263\060\270\061\262\062\266\073\267\076\261\001\002" +
    "\000\040\006\354\011\300\012\274\013\277\014\302\032" +
    "\304\046\273\047\301\050\275\051\307\052\276\053\305" +
    "\054\306\055\272\063\303\001\002\000\004\004\uffe8\001" +
    "\002\000\052\020\ufff7\024\ufff7\026\ufff7\030\ufff7\031\ufff7" +
    "\033\ufff7\056\ufff7\060\ufff7\061\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\070\ufff7\071\ufff7\072\ufff7\074\ufff7\075\ufff7\076\ufff7" +
    "\077\ufff7\100\ufff7\001\002\000\040\004\uffe7\011\300\012" +
    "\274\013\277\014\302\032\304\046\273\047\301\050\275" +
    "\051\307\052\276\053\305\054\306\055\272\063\303\001" +
    "\002\000\030\005\255\012\254\015\256\016\253\021\252" +
    "\031\263\060\270\061\262\062\266\073\267\076\261\001" +
    "\002\000\040\010\361\011\300\012\274\013\277\014\302" +
    "\032\304\046\273\047\301\050\275\051\307\052\276\053" +
    "\305\054\306\055\272\063\303\001\002\000\004\004\uffe9" +
    "\001\002\000\006\027\uffdd\033\uffdd\001\002\000\006\027" +
    "\370\033\066\001\002\000\052\020\uffda\024\uffda\026\uffda" +
    "\030\uffda\031\uffda\033\uffda\056\uffda\060\uffda\061\uffda\064" +
    "\uffda\065\uffda\066\uffda\070\uffda\071\uffda\072\uffda\074\uffda" +
    "\075\uffda\076\uffda\077\uffda\100\uffda\001\002\000\052\020" +
    "\uffdc\024\uffdc\026\uffdc\030\uffdc\031\uffdc\033\uffdc\056\uffdc" +
    "\060\uffdc\061\uffdc\064\uffdc\065\uffdc\066\uffdc\070\uffdc\071" +
    "\uffdc\072\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc" +
    "\001\002\000\054\020\uffdb\024\uffdb\026\uffdb\030\uffdb\031" +
    "\uffdb\033\uffdb\056\uffdb\057\362\060\uffdb\061\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\070\uffdb\071\uffdb\072\uffdb\074\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\001\002\000\052\020\uffd9" +
    "\024\uffd9\026\uffd9\030\uffd9\031\uffd9\033\uffd9\056\uffd9\060" +
    "\uffd9\061\uffd9\064\uffd9\065\uffd9\066\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\001" +
    "\002\000\044\020\uffd8\024\uffd8\026\uffd8\031\uffd8\033\uffd8" +
    "\056\uffd8\060\uffd8\061\uffd8\064\uffd8\066\uffd8\071\uffd8\072" +
    "\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\001\002" +
    "\000\044\020\042\024\047\026\074\031\050\033\066\056" +
    "\040\060\065\061\035\064\032\066\061\071\071\072\073" +
    "\074\037\075\056\076\036\077\060\100\054\001\002\000" +
    "\046\020\042\024\047\026\074\030\373\031\050\033\066" +
    "\056\040\060\065\061\035\064\032\066\061\071\071\072" +
    "\073\074\037\075\056\076\036\077\060\100\054\001\002" +
    "\000\052\020\uffd7\024\uffd7\026\uffd7\030\uffd7\031\uffd7\033" +
    "\uffd7\056\uffd7\060\uffd7\061\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\074\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\001\002\000\030\005\255\012\254\015\256" +
    "\016\253\021\252\031\263\060\270\061\262\062\266\073" +
    "\267\076\261\001\002\000\040\006\376\011\300\012\274" +
    "\013\277\014\302\032\304\046\273\047\301\050\275\051" +
    "\307\052\276\053\305\054\306\055\272\063\303\001\002" +
    "\000\004\027\377\001\002\000\044\020\uffe5\024\uffe5\026" +
    "\uffe5\031\uffe5\033\uffe5\056\uffe5\060\uffe5\061\uffe5\064\uffe5" +
    "\066\uffe5\071\uffe5\072\uffe5\074\uffe5\075\uffe5\076\uffe5\077" +
    "\uffe5\100\uffe5\001\002\000\044\020\042\024\047\026\074" +
    "\031\050\033\066\056\040\060\065\061\035\064\032\066" +
    "\061\071\071\072\073\074\037\075\056\076\036\077\060" +
    "\100\054\001\002\000\046\020\042\024\047\026\074\030" +
    "\u0102\031\050\033\066\056\040\060\065\061\035\064\032" +
    "\066\061\071\071\072\073\074\037\075\056\076\036\077" +
    "\060\100\054\001\002\000\052\020\uffe4\024\uffe4\026\uffe4" +
    "\030\uffe4\031\uffe4\033\uffe4\056\uffe4\060\uffe4\061\uffe4\064" +
    "\uffe4\065\uffe4\066\uffe4\070\uffe4\071\uffe4\072\uffe4\074\uffe4" +
    "\075\uffe4\076\uffe4\077\uffe4\100\uffe4\001\002\000\004\002" +
    "\ufffc\001\002\000\030\005\255\012\254\015\256\016\253" +
    "\021\252\031\263\060\270\061\262\062\266\073\267\076" +
    "\261\001\002\000\040\006\u0106\011\300\012\274\013\277" +
    "\014\302\032\304\046\273\047\301\050\275\051\307\052" +
    "\276\053\305\054\306\055\272\063\303\001\002\000\004" +
    "\027\u0107\001\002\000\006\065\uffd6\070\uffd6\001\002\000" +
    "\006\065\u010a\070\u0109\001\002\000\004\067\u0112\001\002" +
    "\000\030\005\255\012\254\015\256\016\253\021\252\031" +
    "\263\060\270\061\262\062\266\073\267\076\261\001\002" +
    "\000\004\030\u010f\001\002\000\044\020\042\024\047\026" +
    "\074\031\050\033\066\056\040\060\065\061\035\064\032" +
    "\066\061\071\071\072\073\074\037\075\056\076\036\077" +
    "\060\100\054\001\002\000\052\020\042\024\047\026\074" +
    "\030\uffd2\031\050\033\066\056\040\060\065\061\035\064" +
    "\032\065\u010a\066\061\070\u0109\071\071\072\073\074\037" +
    "\075\056\076\036\077\060\100\054\001\002\000\004\030" +
    "\uffd3\001\002\000\052\020\uffd5\024\uffd5\026\uffd5\030\uffd5" +
    "\031\uffd5\033\uffd5\056\uffd5\060\uffd5\061\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\070\uffd5\071\uffd5\072\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\077\uffd5\100\uffd5\001\002\000\040\011\300\012" +
    "\274\013\277\014\302\032\304\046\273\047\301\050\275" +
    "\051\307\052\276\053\305\054\306\055\272\063\303\067" +
    "\u0111\001\002\000\044\020\uffd4\024\uffd4\026\uffd4\031\uffd4" +
    "\033\uffd4\056\uffd4\060\uffd4\061\uffd4\064\uffd4\066\uffd4\071" +
    "\uffd4\072\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4" +
    "\001\002\000\044\020\uffd1\024\uffd1\026\uffd1\031\uffd1\033" +
    "\uffd1\056\uffd1\060\uffd1\061\uffd1\064\uffd1\066\uffd1\071\uffd1" +
    "\072\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\001" +
    "\002\000\044\020\042\024\047\026\074\031\050\033\066" +
    "\056\040\060\065\061\035\064\032\066\061\071\071\072" +
    "\073\074\037\075\056\076\036\077\060\100\054\001\002" +
    "\000\046\020\042\024\047\026\074\030\uffd0\031\050\033" +
    "\066\056\040\060\065\061\035\064\032\066\061\071\071" +
    "\072\073\074\037\075\056\076\036\077\060\100\054\001" +
    "\002\000\004\002\ufffb\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\012\002\003\017\010\020\004\027\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\012\031\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\022" +
    "\031\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\033\004\044\006\056\007" +
    "\043\010\054\011\042\012\040\014\066\015\051\021\067" +
    "\024\032\033\062\034\061\035\045\037\050\040\071\043" +
    "\052\052\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\241\006\056\007\043\010\054\011\042\012" +
    "\040\014\066\015\051\021\067\024\032\033\062\034\061" +
    "\035\045\037\050\040\071\043\052\052\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\355\013\256\016\264\032\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\103\047\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\114" +
    "\051\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\121\051\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\050\132\051\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\135\051\113\001" +
    "\001\000\002\001\001\000\006\050\137\051\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\147\051\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\152\051\113\001\001" +
    "\000\002\001\001\000\006\050\154\051\113\001\001\000" +
    "\002\001\001\000\006\050\156\051\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\161\047\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\165\047\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\172\045\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\172\045\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\237\001\001\000" +
    "\046\003\240\004\044\006\056\007\043\010\054\011\042" +
    "\012\040\014\066\015\051\021\067\024\032\033\062\034" +
    "\061\035\045\037\050\040\071\043\052\052\063\001\001" +
    "\000\044\004\241\006\056\007\043\010\054\011\042\012" +
    "\040\014\066\015\051\021\067\024\032\033\062\034\061" +
    "\035\045\037\050\040\071\043\052\052\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\244\001\001" +
    "\000\046\003\245\004\044\006\056\007\043\010\054\011" +
    "\042\012\040\014\066\015\051\021\067\024\032\033\062" +
    "\034\061\035\045\037\050\040\071\043\052\052\063\001" +
    "\001\000\044\004\241\006\056\007\043\010\054\011\042" +
    "\012\040\014\066\015\051\021\067\024\032\033\062\034" +
    "\061\035\045\037\050\040\071\043\052\052\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\257\013" +
    "\256\016\264\032\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\331\013\256\016\264\032\263\001" +
    "\001\000\012\005\327\013\256\016\264\032\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\270\013\256\016" +
    "\264\032\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\324\013\256\016\264\032" +
    "\263\001\001\000\012\005\323\013\256\016\264\032\263" +
    "\001\001\000\012\005\322\013\256\016\264\032\263\001" +
    "\001\000\012\005\321\013\256\016\264\032\263\001\001" +
    "\000\012\005\320\013\256\016\264\032\263\001\001\000" +
    "\012\005\317\013\256\016\264\032\263\001\001\000\012" +
    "\005\316\013\256\016\264\032\263\001\001\000\012\005" +
    "\315\013\256\016\264\032\263\001\001\000\012\005\314" +
    "\013\256\016\264\032\263\001\001\000\012\005\313\013" +
    "\256\016\264\032\263\001\001\000\012\005\312\013\256" +
    "\016\264\032\263\001\001\000\012\005\311\013\256\016" +
    "\264\032\263\001\001\000\012\005\310\013\256\016\264" +
    "\032\263\001\001\000\012\005\307\013\256\016\264\032" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\333\013\256\016\264\032\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\336\001" +
    "\001\000\046\003\337\004\044\006\056\007\043\010\054" +
    "\011\042\012\040\014\066\015\051\021\067\024\032\033" +
    "\062\034\061\035\045\037\050\040\071\043\052\052\063" +
    "\001\001\000\044\004\241\006\056\007\043\010\054\011" +
    "\042\012\040\014\066\015\051\021\067\024\032\033\062" +
    "\034\061\035\045\037\050\040\071\043\052\052\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\346\013" +
    "\256\016\264\032\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\352\013\256\016" +
    "\264\032\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\357\013" +
    "\256\016\264\032\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\362\001\001\000\012\012\365\021" +
    "\366\022\364\023\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\370\001\001\000\046\003\371\004\044\006\056\007\043" +
    "\010\054\011\042\012\040\014\066\015\051\021\067\024" +
    "\032\033\062\034\061\035\045\037\050\040\071\043\052" +
    "\052\063\001\001\000\044\004\241\006\056\007\043\010" +
    "\054\011\042\012\040\014\066\015\051\021\067\024\032" +
    "\033\062\034\061\035\045\037\050\040\071\043\052\052" +
    "\063\001\001\000\002\001\001\000\012\005\374\013\256" +
    "\016\264\032\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\377\001\001\000\046\003\u0100\004\044" +
    "\006\056\007\043\010\054\011\042\012\040\014\066\015" +
    "\051\021\067\024\032\033\062\034\061\035\045\037\050" +
    "\040\071\043\052\052\063\001\001\000\044\004\241\006" +
    "\056\007\043\010\054\011\042\012\040\014\066\015\051" +
    "\021\067\024\032\033\062\034\061\035\045\037\050\040" +
    "\071\043\052\052\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\u0104\013\256\016\264\032\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\u0107" +
    "\001\001\000\006\025\u010a\026\u010b\001\001\000\002\001" +
    "\001\000\012\005\u010f\013\256\016\264\032\263\001\001" +
    "\000\002\001\001\000\046\003\u010c\004\044\006\056\007" +
    "\043\010\054\011\042\012\040\014\066\015\051\021\067" +
    "\024\032\033\062\034\061\035\045\037\050\040\071\043" +
    "\052\052\063\001\001\000\050\004\241\006\056\007\043" +
    "\010\054\011\042\012\040\014\066\015\051\021\067\024" +
    "\032\025\u010d\026\u010b\033\062\034\061\035\045\037\050" +
    "\040\071\043\052\052\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u0112\001\001\000\046\003\u0113\004\044\006\056\007" +
    "\043\010\054\011\042\012\040\014\066\015\051\021\067" +
    "\024\032\033\062\034\061\035\045\037\050\040\071\043" +
    "\052\052\063\001\001\000\044\004\241\006\056\007\043" +
    "\010\054\011\042\012\040\014\066\015\051\021\067\024" +
    "\032\033\062\034\061\035\045\037\050\040\071\043\052" +
    "\052\063\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public static HashMap<String, String> mapa = new HashMap<>();
    public static HashMap<String, String> claves = new HashMap<>(); 
    public static HashMap<String, HashMap> Jsons = new HashMap<>();    
    public static ArrayList<String> Traduccion = new ArrayList<String>();
    public static ArrayList<Exception_> erroresSintacticos = new ArrayList<Exception_>(); //ArrayList del los errores sintacticos
    public static String tabuladores = "";
    public static int reduccionDeTabulaciones = 0;
    public static String else_ = "";
    public static String title = "";
    public static String ejex = "";
    public static String ejey = "";
    public static Object ejes = "";
    public static Object valores = "";
    


    public void syntax_error(Symbol s){

        erroresSintacticos.add(new Exception_("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= JSON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;

    tabuladores =""; 
    reduccionDeTabulaciones= 0; 
    reduccionDeTabulaciones +=1;
    Traduccion.add("def main: ");
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= VOID MAIN PAR_IZQ NT$0 PAR_DER CHR_IZQ instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= error CHR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= sentencia PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= sumar PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= declaracion PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= vacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= Sentencia_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= INSTANCIA PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= CICLO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= CONBREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= Variables_globales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= BARRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= PIE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sumar ::= REVALUAR COR_IZQ expresion COR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    //System.out.println("El valor de la expresión es: "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= IMPRIMIR PUNTO WRITE PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Traduccion.add(tabuladores+"print("+a+")");
    //System.out.println("print("+a+")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= tipoDato expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Traduccion.add(tabuladores+b);
    //System.out.println("Declaración encontrada: "+a+" con valor: "+b) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTANCIA ::= ID IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Traduccion.add(tabuladores+a +" = " +b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"while "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    //System.out.println("if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_while ::= ENCICLADO PAR_IZQ expresion PAR_DER CHR_IZQ NT$1 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$2 ::= 
            {
              Object RESULT =null;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"while true");
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DO_WHILE ::= RDO CHR_IZQ NT$2 instrucciones CHR_DER ENCICLADO PAR_IZQ expresion PAR_DER PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"for "+a+" in "+" range "+"("+b+","+c+")");
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CICLO_FOR ::= FOR PAR_IZQ PRUEBA ID comparativa ENTERO PTCOMA ID comparativa ENTERO PTCOMA ID MAS MAS PAR_DER CHR_IZQ NT$3 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_+"if "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= RIF PAR_IZQ expresion PAR_DER CHR_IZQ NT$4 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT =null;

    else_ = "else ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sentencia_else ::= condicion DESIF NT$5 sentencia_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia_if ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_if ::= else_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_if ::= Sentencia_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =null;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else_simple ::= CHR_IZQ NT$6 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_simple",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"match "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_switch ::= RSWITCH PAR_IZQ expresion PAR_DER CHR_IZQ NT$7 CASES CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASO ::= RCASE expresion DOSPT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Traduccion.add(tabuladores+"case "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASES ::= CASO instrucciones CASES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASES ::= CASO instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$8 ::= 
            {
              Object RESULT =null;
Traduccion.add(tabuladores+"default"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASES ::= DEFECTO DOSPT NT$8 instrucciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONBREAK ::= RBREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONBREAK",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDato ::= REVALUAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDato ::= PRUEBA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDato ::= VARCHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoDato ::= VARBOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipoDato ::= VARSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoDato ::= BOOLTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipoDato ::= BOOLFAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipoDato ::= VARDOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= VARBOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= BOOLTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= BOOLFAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operaciones ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "+" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones ::= MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="-"+a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones ::= expresion COMMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "," + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "-" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "*" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operaciones ::= expresion DIV expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "/" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operaciones ::= expresion IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "=" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparacion ::= expresion IGUALDAD expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + signo + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparacion ::= expresion MAYOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + signo + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + signo + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparacion ::= expresion MENOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + signo + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + signo + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparacion ::= expresion DIFERENTE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + signo + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // logica ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + " or " + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // logica ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + " and " + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // logica ::= NEGACION expresion 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  " not " + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comparativa ::= IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comparativa ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comparativa ::= MENOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comparativa ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comparativa ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comparativa ::= DIFERENTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // JSON ::= CHR_IZQ sentencias_json CHR_DER 
            {
              Object RESULT =null;
		
    System.out.println(Graficas.nombrejson);
    Jsons.put( Graficas.nombrejson, mapa);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencias_json ::= sentencia_json 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_json",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencias_json ::= sentencia_json COMMA sentencias_json 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_json",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia_json ::= CADENA DOSPT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mapa.put(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia_json ::= CADENA DOSPT DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mapa.put(a, b); System.out.println(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia_json ::= CADENA DOSPT ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mapa.put(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Variables_globales ::= VOID GLOBAL PAR_IZQ PAR_DER CHR_IZQ globales CHR_DER 
            {
              Object RESULT =null;
		System.out.println("he recibido variables globales");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables_globales",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // globales ::= global PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globales",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // globales ::= global PTCOMA globales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globales",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // global ::= VARDOUBLE ID IGUAL DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mapa.put(a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // global ::= VARSTRING ID IGUAL CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mapa.put(a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // global ::= VARDOUBLE ID IGUAL ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mapa.put(a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // global ::= VARDOUBLE ID IGUAL instancia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mapa.put(a, b.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // global ::= VARSTRING ID IGUAL instancia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mapa.put(a, b.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BARRAS ::= VOID GBARRAS PAR_IZQ PAR_DER CHR_IZQ BarrasGlobales CHR_DER 
            {
              Object RESULT =null;
		  
    //Graficas.GraficarPie(title,ejex,ejey,ejes,valores);
    Graficas.Graficar(title,ejex,ejey,ejes,valores);
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BARRAS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BarrasGlobales ::= BarrasGlobal PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BarrasGlobales",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BarrasGlobales ::= BarrasGlobal PTCOMA BarrasGlobales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BarrasGlobales",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BarrasGlobal ::= VARSTRING ARREGLO ID IGUAL CHR_IZQ Intancias CHR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ejes = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BarrasGlobal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BarrasGlobal ::= VARSTRING TITULOG IGUAL Intancias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String valor = mapa.get(a); System.out.println("este es el titulo"+valor); title = valor; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BarrasGlobal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BarrasGlobal ::= VARDOUBLE ARREGLO ID IGUAL CHR_IZQ Intancias CHR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 valores = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BarrasGlobal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BarrasGlobal ::= VARSTRING TITLEY IGUAL Intancias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ejey = ""; ejey = a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BarrasGlobal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BarrasGlobal ::= VARSTRING TITLEX IGUAL Intancias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ejex = ""; ejex = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BarrasGlobal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Intancias ::= ID 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String valor = mapa.get(b);   RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Intancias",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Intancias ::= ID COMMA Intancias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String valor = mapa.get(a);  RESULT = valor +","+ b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Intancias",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Intancias ::= DECIMAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Intancias",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Intancias ::= DECIMAL COMMA Intancias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a +","+ b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Intancias",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Intancias ::= CADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Intancias",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Intancias ::= CADENA COMMA Intancias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a +","+ b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Intancias",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Intancias ::= instancia 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Intancias",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Intancias ::= instancia COMMA Intancias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a +","+ b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Intancias",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // instancia ::= DOLLAR CHR_IZQ NEWVAL COMMA CADENA COMMA CADENA CHR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    //System.out.println(a);
    HashMap clave = Jsons.get(a.toString());; 
    Object valor = clave.get(b);  
    RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instancia",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PIE ::= VOID GPIE PAR_IZQ PAR_DER CHR_IZQ BarrasGlobales CHR_DER 
            {
              Object RESULT =null;
		  
    System.out.println("he entrado a graficar");
    Graficas.GraficarPie(title,ejex,ejey,ejes,valores);
    //Graficas.Graficar(title,ejex,ejey,ejes,valores);
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIE",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import Errores.Exception_;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\011\000\002\003\004" +
    "\000\002\003\003\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\007\006\000\002\006\010" +
    "\000\002\010\006\000\002\034\002\000\002\015\014\000" +
    "\002\033\003\000\002\035\002\000\002\013\014\000\002" +
    "\036\002\000\002\022\006\000\002\024\003\000\002\024" +
    "\003\000\002\037\002\000\002\025\006\000\002\040\002" +
    "\000\002\026\012\000\002\030\005\000\002\027\007\000" +
    "\002\027\006\000\002\021\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\005\000\002" +
    "\014\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\031\005\000" +
    "\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\010\026\010\027\012\046\006\001\002\000" +
    "\004\002\217\001\002\000\004\002\uffff\001\002\000\044" +
    "\002\uffdd\020\uffdd\024\uffdd\030\uffdd\033\uffdd\034\uffdd\045" +
    "\uffdd\046\uffdd\051\uffdd\052\uffdd\054\uffdd\056\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\066\uffdd\001\002\000\004\002" +
    "\ufffe\001\002\000\004\025\020\001\002\000\004\002\000" +
    "\001\002\000\004\061\014\001\002\000\004\030\017\001" +
    "\002\000\004\057\015\001\002\000\004\021\016\001\002" +
    "\000\004\030\uffb7\001\002\000\004\002\uffb8\001\002\000" +
    "\004\005\021\001\002\000\004\006\022\001\002\000\004" +
    "\027\023\001\002\000\036\020\035\024\041\033\051\034" +
    "\024\045\033\046\006\051\050\052\030\054\025\062\032" +
    "\063\045\064\031\065\047\066\043\001\002\000\042\020" +
    "\ufff2\024\ufff2\030\ufff2\033\ufff2\034\ufff2\045\ufff2\046\ufff2" +
    "\051\ufff2\052\ufff2\054\ufff2\056\ufff2\062\ufff2\063\ufff2\064" +
    "\ufff2\065\ufff2\066\ufff2\001\002\000\004\005\200\001\002" +
    "\000\040\020\035\024\041\030\177\033\051\034\024\045" +
    "\033\046\006\051\050\052\030\054\025\062\032\063\045" +
    "\064\031\065\047\066\043\001\002\000\042\020\ufff1\024" +
    "\ufff1\030\ufff1\033\ufff1\034\ufff1\045\ufff1\046\ufff1\051\ufff1" +
    "\052\ufff1\054\ufff1\056\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\001\002\000\004\031\uffcc\001\002\000\004" +
    "\031\uffcf\001\002\000\004\031\uffd1\001\002\000\004\005" +
    "\166\001\002\000\044\020\ufff7\024\ufff7\030\ufff7\033\ufff7" +
    "\034\ufff7\045\ufff7\046\ufff7\050\155\051\ufff7\052\ufff7\054" +
    "\ufff7\056\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7" +
    "\001\002\000\006\007\152\031\uffd2\001\002\000\004\031" +
    "\147\001\002\000\004\004\146\001\002\000\042\020\ufffb" +
    "\024\ufffb\030\ufffb\033\ufffb\034\ufffb\045\ufffb\046\ufffb\051" +
    "\ufffb\052\ufffb\054\ufffb\056\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\001\002\000\004\023\141\001\002\000" +
    "\042\020\ufff5\024\ufff5\030\ufff5\033\ufff5\034\ufff5\045\ufff5" +
    "\046\ufff5\051\ufff5\052\ufff5\054\ufff5\056\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\001\002\000\004\031\uffcb" +
    "\001\002\000\004\004\140\001\002\000\004\031\uffd0\001" +
    "\002\000\004\004\137\001\002\000\004\031\uffce\001\002" +
    "\000\004\031\uffcd\001\002\000\004\005\055\001\002\000" +
    "\042\020\ufff3\024\ufff3\030\ufff3\033\ufff3\034\ufff3\045\ufff3" +
    "\046\ufff3\051\ufff3\052\ufff3\054\ufff3\056\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\001\002\000\042\020\ufff6" +
    "\024\ufff6\030\ufff6\033\ufff6\034\ufff6\045\ufff6\046\ufff6\051" +
    "\ufff6\052\ufff6\054\ufff6\056\ufff6\062\ufff6\063\ufff6\064\ufff6" +
    "\065\ufff6\066\ufff6\001\002\000\042\020\ufff4\024\ufff4\030" +
    "\ufff4\033\ufff4\034\ufff4\045\ufff4\046\ufff4\051\ufff4\052\ufff4" +
    "\054\ufff4\056\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\001\002\000\014\005\060\015\061\016\057\021\062" +
    "\031\056\001\002\000\040\005\uffd4\006\uffd4\015\uffd4\016" +
    "\uffd4\021\uffd4\031\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\057\uffd4\001\002\000" +
    "\052\005\uffd7\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\021\uffd7\031\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\057\uffd7\001\002\000\010\005\060\015\061\016\057\001" +
    "\002\000\052\005\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\021\uffd8\031\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\057\uffd8\001\002\000\040\005\uffd5\006\uffd5\015" +
    "\uffd5\016\uffd5\021\uffd5\031\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\057\uffd5\001" +
    "\002\000\034\005\103\015\105\016\077\021\075\031\110" +
    "\035\100\036\107\037\101\040\113\041\102\042\111\043" +
    "\112\044\076\001\002\000\050\005\uffd3\006\uffd3\011\065" +
    "\012\066\013\070\014\067\015\uffd3\016\uffd3\021\uffd3\031" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\057\uffd3\001\002\000\010\005\060\015" +
    "\061\016\057\001\002\000\010\005\060\015\061\016\057" +
    "\001\002\000\010\005\060\015\061\016\057\001\002\000" +
    "\010\005\060\015\061\016\057\001\002\000\052\005\uffda" +
    "\006\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\021\uffda\031\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\057\uffda\001" +
    "\002\000\052\005\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\021\uffd9\031\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\057\uffd9\001\002\000\052\005\uffdb\006\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\070\014\067\015\uffdb\016\uffdb" +
    "\021\uffdb\031\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\057\uffdb\001\002\000\052" +
    "\005\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc\013\070\014" +
    "\067\015\uffdc\016\uffdc\021\uffdc\031\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\057" +
    "\uffdc\001\002\000\030\004\uffb9\005\uffb9\006\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\021\uffb9\031" +
    "\uffb9\001\002\000\014\005\uffc3\015\uffc3\016\uffc3\021\uffc3" +
    "\031\uffc3\001\002\000\030\004\uffbb\005\uffbb\006\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\021\uffbb" +
    "\031\uffbb\001\002\000\014\005\uffca\015\uffca\016\uffca\021" +
    "\uffca\031\uffca\001\002\000\014\005\uffc8\015\uffc8\016\uffc8" +
    "\021\uffc8\031\uffc8\001\002\000\014\005\uffc6\015\uffc6\016" +
    "\uffc6\021\uffc6\031\uffc6\001\002\000\010\005\060\015\061" +
    "\016\057\001\002\000\024\005\uffc1\011\123\012\124\013" +
    "\126\014\125\015\uffc1\016\uffc1\021\uffc1\031\uffc1\001\002" +
    "\000\030\004\uffbc\005\uffbc\006\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\021\uffbc\031\uffbc\001\002" +
    "\000\014\005\060\015\061\016\057\021\062\031\056\001" +
    "\002\000\014\005\uffc9\015\uffc9\016\uffc9\021\uffc9\031\uffc9" +
    "\001\002\000\030\004\uffba\005\uffba\006\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\021\uffba\031\uffba" +
    "\001\002\000\014\005\uffc5\015\uffc5\016\uffc5\021\uffc5\031" +
    "\uffc5\001\002\000\014\005\uffc4\015\uffc4\016\uffc4\021\uffc4" +
    "\031\uffc4\001\002\000\014\005\uffc7\015\uffc7\016\uffc7\021" +
    "\uffc7\031\uffc7\001\002\000\004\006\115\001\002\000\004" +
    "\027\116\001\002\000\036\020\uffea\024\uffea\033\uffea\034" +
    "\uffea\045\uffea\046\uffea\051\uffea\052\uffea\054\uffea\062\uffea" +
    "\063\uffea\064\uffea\065\uffea\066\uffea\001\002\000\036\020" +
    "\035\024\041\033\051\034\024\045\033\046\006\051\050" +
    "\052\030\054\025\062\032\063\045\064\031\065\047\066" +
    "\043\001\002\000\040\020\035\024\041\030\122\033\051" +
    "\034\024\045\033\046\006\051\050\052\030\054\025\062" +
    "\032\063\045\064\031\065\047\066\043\001\002\000\042" +
    "\020\ufffc\024\ufffc\030\ufffc\033\ufffc\034\ufffc\045\ufffc\046" +
    "\ufffc\051\ufffc\052\ufffc\054\ufffc\056\ufffc\062\ufffc\063\ufffc" +
    "\064\ufffc\065\ufffc\066\ufffc\001\002\000\044\020\uffe9\024" +
    "\uffe9\030\uffe9\033\uffe9\034\uffe9\045\uffe9\046\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\054\uffe9\056\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\065\uffe9\066\uffe9\001\002\000\012\015\105\016\077" +
    "\021\075\031\110\001\002\000\012\015\105\016\077\021" +
    "\075\031\110\001\002\000\012\015\105\016\077\021\075" +
    "\031\110\001\002\000\012\015\105\016\077\021\075\031" +
    "\110\001\002\000\030\004\uffbe\005\uffbe\006\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe\031" +
    "\uffbe\001\002\000\030\004\uffbd\005\uffbd\006\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\021\uffbd\031" +
    "\uffbd\001\002\000\030\004\uffbf\005\uffbf\006\uffbf\011\uffbf" +
    "\012\uffbf\013\126\014\125\015\uffbf\016\uffbf\021\uffbf\031" +
    "\uffbf\001\002\000\030\004\uffc0\005\uffc0\006\uffc0\011\uffc0" +
    "\012\uffc0\013\126\014\125\015\uffc0\016\uffc0\021\uffc0\031" +
    "\uffc0\001\002\000\014\006\134\011\065\012\066\013\070" +
    "\014\067\001\002\000\014\005\uffc2\015\uffc2\016\uffc2\021" +
    "\uffc2\031\uffc2\001\002\000\014\006\136\011\065\012\066" +
    "\013\070\014\067\001\002\000\052\005\uffd6\006\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\021\uffd6\031\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\057\uffd6\001\002\000\042" +
    "\020\ufffa\024\ufffa\030\ufffa\033\ufffa\034\ufffa\045\ufffa\046" +
    "\ufffa\051\ufffa\052\ufffa\054\ufffa\056\ufffa\062\ufffa\063\ufffa" +
    "\064\ufffa\065\ufffa\066\ufffa\001\002\000\042\020\ufff8\024" +
    "\ufff8\030\ufff8\033\ufff8\034\ufff8\045\ufff8\046\ufff8\051\ufff8" +
    "\052\ufff8\054\ufff8\056\ufff8\062\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\001\002\000\004\022\142\001\002\000\004" +
    "\005\143\001\002\000\012\015\105\016\077\021\075\031" +
    "\110\001\002\000\014\006\145\011\123\012\124\013\126" +
    "\014\125\001\002\000\004\004\uffef\001\002\000\042\020" +
    "\ufff9\024\ufff9\030\ufff9\033\ufff9\034\ufff9\045\ufff9\046\ufff9" +
    "\051\ufff9\052\ufff9\054\ufff9\056\ufff9\062\ufff9\063\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\001\002\000\004\032\150\001\002" +
    "\000\012\015\105\016\077\021\075\031\110\001\002\000" +
    "\014\004\uffee\011\123\012\124\013\126\014\125\001\002" +
    "\000\010\005\060\015\061\016\057\001\002\000\014\010" +
    "\154\011\065\012\066\013\070\014\067\001\002\000\004" +
    "\004\ufff0\001\002\000\006\027\uffe8\033\uffe8\001\002\000" +
    "\006\027\162\033\051\001\002\000\042\020\uffe5\024\uffe5" +
    "\030\uffe5\033\uffe5\034\uffe5\045\uffe5\046\uffe5\051\uffe5\052" +
    "\uffe5\054\uffe5\056\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\001\002\000\042\020\uffe7\024\uffe7\030\uffe7\033" +
    "\uffe7\034\uffe7\045\uffe7\046\uffe7\051\uffe7\052\uffe7\054\uffe7" +
    "\056\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\001" +
    "\002\000\042\020\uffe6\024\uffe6\030\uffe6\033\uffe6\034\uffe6" +
    "\045\uffe6\046\uffe6\051\uffe6\052\uffe6\054\uffe6\056\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\001\002\000\036" +
    "\020\uffe4\024\uffe4\033\uffe4\034\uffe4\045\uffe4\046\uffe4\051" +
    "\uffe4\052\uffe4\054\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\001\002\000\036\020\035\024\041\033\051\034" +
    "\024\045\033\046\006\051\050\052\030\054\025\062\032" +
    "\063\045\064\031\065\047\066\043\001\002\000\040\020" +
    "\035\024\041\030\165\033\051\034\024\045\033\046\006" +
    "\051\050\052\030\054\025\062\032\063\045\064\031\065" +
    "\047\066\043\001\002\000\042\020\uffe3\024\uffe3\030\uffe3" +
    "\033\uffe3\034\uffe3\045\uffe3\046\uffe3\051\uffe3\052\uffe3\054" +
    "\uffe3\056\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\001\002\000\014\005\060\015\061\016\057\021\062\031" +
    "\056\001\002\000\034\005\103\015\105\016\077\021\075" +
    "\031\110\035\100\036\107\037\101\040\113\041\102\042" +
    "\111\043\112\044\076\001\002\000\014\005\060\015\061" +
    "\016\057\021\062\031\056\001\002\000\004\006\172\001" +
    "\002\000\004\027\173\001\002\000\036\020\uffed\024\uffed" +
    "\033\uffed\034\uffed\045\uffed\046\uffed\051\uffed\052\uffed\054" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\001\002" +
    "\000\036\020\035\024\041\033\051\034\024\045\033\046" +
    "\006\051\050\052\030\054\025\062\032\063\045\064\031" +
    "\065\047\066\043\001\002\000\040\020\035\024\041\030" +
    "\176\033\051\034\024\045\033\046\006\051\050\052\030" +
    "\054\025\062\032\063\045\064\031\065\047\066\043\001" +
    "\002\000\042\020\uffec\024\uffec\030\uffec\033\uffec\034\uffec" +
    "\045\uffec\046\uffec\051\uffec\052\uffec\054\uffec\056\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\001\002\000\004" +
    "\002\ufffd\001\002\000\012\015\105\016\077\021\075\031" +
    "\110\001\002\000\014\006\202\011\123\012\124\013\126" +
    "\014\125\001\002\000\004\027\203\001\002\000\004\055" +
    "\uffe2\001\002\000\004\055\205\001\002\000\014\005\060" +
    "\015\061\016\057\021\062\031\056\001\002\000\004\030" +
    "\214\001\002\000\036\020\035\024\041\033\051\034\024" +
    "\045\033\046\006\051\050\052\030\054\025\062\032\063" +
    "\045\064\031\065\047\066\043\001\002\000\040\020\035" +
    "\024\041\033\051\034\024\045\033\046\006\051\050\052" +
    "\030\054\025\056\211\062\032\063\045\064\031\065\047" +
    "\066\043\001\002\000\004\004\212\001\002\000\006\030" +
    "\uffde\055\205\001\002\000\004\030\uffdf\001\002\000\042" +
    "\020\uffe1\024\uffe1\030\uffe1\033\uffe1\034\uffe1\045\uffe1\046" +
    "\uffe1\051\uffe1\052\uffe1\054\uffe1\056\uffe1\062\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\066\uffe1\001\002\000\004\057\216\001" +
    "\002\000\036\020\uffe0\024\uffe0\033\uffe0\034\uffe0\045\uffe0" +
    "\046\uffe0\051\uffe0\052\uffe0\054\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\012\002\003\020\010\021\004\031\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\025\004\037\006\045\007\036\010\043\011\035\013" +
    "\033\015\052\016\041\021\051\022\053\026\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\120\006" +
    "\045\007\036\010\043\011\035\013\033\015\052\016\041" +
    "\021\051\022\053\026\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\063\012\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\105" +
    "\023\103\001\001\000\002\001\001\000\004\005\073\001" +
    "\001\000\004\005\072\001\001\000\004\005\071\001\001" +
    "\000\004\005\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\063\012" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\116\001\001\000\032" +
    "\003\117\004\037\006\045\007\036\010\043\011\035\013" +
    "\033\015\052\016\041\021\051\022\053\026\026\001\001" +
    "\000\030\004\120\006\045\007\036\010\043\011\035\013" +
    "\033\015\052\016\041\021\051\022\053\026\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\131\001" +
    "\001\000\004\023\130\001\001\000\004\023\127\001\001" +
    "\000\004\023\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\150\001\001\000\002\001\001\000\004\005\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\155" +
    "\001\001\000\010\013\160\024\157\025\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\162\001\001\000\032\003\163\004\037\006\045\007" +
    "\036\010\043\011\035\013\033\015\052\016\041\021\051" +
    "\022\053\026\026\001\001\000\030\004\120\006\045\007" +
    "\036\010\043\011\035\013\033\015\052\016\041\021\051" +
    "\022\053\026\026\001\001\000\002\001\001\000\006\005" +
    "\063\012\166\001\001\000\006\014\167\023\103\001\001" +
    "\000\006\005\063\012\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\173\001\001\000\032\003\174" +
    "\004\037\006\045\007\036\010\043\011\035\013\033\015" +
    "\052\016\041\021\051\022\053\026\026\001\001\000\030" +
    "\004\120\006\045\007\036\010\043\011\035\013\033\015" +
    "\052\016\041\021\051\022\053\026\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\203\001\001" +
    "\000\006\027\205\030\206\001\001\000\006\005\063\012" +
    "\214\001\001\000\002\001\001\000\032\003\207\004\037" +
    "\006\045\007\036\010\043\011\035\013\033\015\052\016" +
    "\041\021\051\022\053\026\026\001\001\000\030\004\120" +
    "\006\045\007\036\010\043\011\035\013\033\015\052\016" +
    "\041\021\051\022\053\026\026\001\001\000\002\001\001" +
    "\000\006\027\212\030\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    HashMap<String, Double> miHashMap = new HashMap<>();
    public static ArrayList<String> Traduccion = new ArrayList<String>();
    public static ArrayList<Exception_> erroresSintacticos = new ArrayList<Exception_>(); //ArrayList del los errores sintacticos
    public static String tabuladores = "";
    public static int reduccionDeTabulaciones = 0;
    public static String else_ = "";

    public void syntax_error(Symbol s){

        erroresSintacticos.add(new Exception_("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right) );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= JSON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= VOID MAIN PAR_IZQ PAR_DER CHR_IZQ instrucciones CHR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= sentencia PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= sumar PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= declaracion PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= vacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= Sentencia_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= nada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sumar ::= REVALUAR COR_IZQ expresion COR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    //System.out.println("El valor de la expresión es: "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= IMPRIMIR PUNTO WRITE PAR_IZQ Impresion PAR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Traduccion.add(tabuladores+"print("+a+")");
    //System.out.println("print("+a+")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= tipoDato ID IGUAL Impresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Traduccion.add(tabuladores+a +" = " +b);
    //System.out.println("Declaración encontrada: "+a+" con valor: "+b) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"while "+a+ " " +b+ " " +c);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    //System.out.println("if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_while ::= ENCICLADO PAR_IZQ variables comparacion variables PAR_DER CHR_IZQ NT$0 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compara_if ::= Impresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compara_if",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_+"if "+a+ " " +b+ " " +c);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicion ::= RIF PAR_IZQ variables comparacion variables PAR_DER CHR_IZQ NT$1 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;

    else_ = "else ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencia_else ::= condicion DESIF NT$2 sentencia_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_if ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_if ::= else_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =null;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // else_simple ::= CHR_IZQ NT$3 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_simple",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add("match "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_switch ::= RSWITCH PAR_IZQ Impresion PAR_DER CHR_IZQ NT$4 CASES CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASO ::= RCASE variables DOSPT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Traduccion.add("case "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASES ::= CASO instrucciones RBREAK PTCOMA CASES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASES ::= CASO instrucciones RBREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comentario ::= COMENTAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a +"+"+ b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a +"-"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a+"*"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion DIV expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a+"/"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variables ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variables ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variables ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoDato ::= REVALUAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoDato ::= PRUEBA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoDato ::= VARCHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDato ::= VARBOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDato ::= VARSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDato ::= BOOLTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDato ::= BOOLFAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoDato ::= VARDOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comparacion ::= IGUALDAD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparacion ::= MENOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparacion ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comparacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comparacion ::= DIFERENTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparacion ::= OR 
            {
              Object RESULT =null;
		 RESULT = "or";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparacion ::= AND 
            {
              Object RESULT =null;
		 RESULT = "and";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparacion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparacion ::= Impresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Impresion ::= Impresion MAS Impresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a +"+"+ b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Impresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Impresion ::= Impresion MENOS Impresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a +"-"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Impresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Impresion ::= Impresion POR Impresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a+"*"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Impresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Impresion ::= Impresion DIV Impresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a+"/"+b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Impresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Impresion ::= ENTERO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Impresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Impresion ::= DECIMAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Impresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Impresion ::= ID 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Impresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Impresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Impresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // JSON ::= CHR_IZQ sentencias_json CHR_DER 
            {
              Object RESULT =null;
		
System.out.println("HE Recibido un JSON");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencias_json ::= TITLE DOSPT CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_json",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

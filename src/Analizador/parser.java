
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import Errores.Exception_;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\011\000\002\003\004" +
    "\000\002\003\003\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\007\006\000\002\006\010\000\002\010\004\000" +
    "\002\033\005\000\002\041\002\000\002\014\012\000\002" +
    "\042\002\000\002\034\014\000\002\043\002\000\002\035" +
    "\025\000\002\044\002\000\002\012\012\000\002\045\002" +
    "\000\002\021\006\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\046\002\000\002\023\006\000\002" +
    "\047\002\000\002\024\012\000\002\026\005\000\002\025" +
    "\005\000\002\025\004\000\002\050\002\000\002\025\006" +
    "\000\002\037\004\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\004\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\027\005\000" +
    "\002\030\003\000\002\030\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\006\026\007\027\010\001\002\000\004\002" +
    "\306\001\002\000\004\002\uffff\001\002\000\004\002\ufffe" +
    "\001\002\000\004\025\034\001\002\000\012\021\017\034" +
    "\014\035\013\061\015\001\002\000\004\002\000\001\002" +
    "\000\004\030\033\001\002\000\004\057\031\001\002\000" +
    "\004\057\027\001\002\000\004\057\025\001\002\000\006" +
    "\030\uffaa\053\023\001\002\000\004\057\020\001\002\000" +
    "\006\016\021\021\022\001\002\000\006\030\uffa4\053\uffa4" +
    "\001\002\000\006\030\uffa5\053\uffa5\001\002\000\012\021" +
    "\017\034\014\035\013\061\015\001\002\000\004\030\uffa9" +
    "\001\002\000\004\021\026\001\002\000\006\030\uffa8\053" +
    "\uffa8\001\002\000\004\021\030\001\002\000\006\030\uffa7" +
    "\053\uffa7\001\002\000\004\021\032\001\002\000\006\030" +
    "\uffa6\053\uffa6\001\002\000\004\002\uffab\001\002\000\004" +
    "\005\035\001\002\000\004\006\036\001\002\000\004\027" +
    "\037\001\002\000\042\020\050\024\055\031\056\033\072" +
    "\046\046\050\070\051\043\054\040\056\066\062\075\063" +
    "\076\064\045\065\063\066\044\067\065\070\062\001\002" +
    "\000\004\005\265\001\002\000\050\020\ufff3\024\ufff3\030" +
    "\ufff3\031\ufff3\033\ufff3\046\ufff3\050\ufff3\051\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\060\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\001\002\000\044\020\050" +
    "\024\055\030\264\031\056\033\072\046\046\050\070\051" +
    "\043\054\040\056\066\062\075\063\076\064\045\065\063" +
    "\066\044\067\065\070\062\001\002\000\024\005\uffcd\015" +
    "\uffcd\016\uffcd\021\uffcd\031\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\066\uffcd\001\002\000\024\005\uffd0\015\uffd0\016\uffd0\021" +
    "\uffd0\031\uffd0\050\uffd0\051\uffd0\052\uffd0\066\uffd0\001\002" +
    "\000\024\005\uffd2\015\uffd2\016\uffd2\021\uffd2\031\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\066\uffd2\001\002\000\004\005\255" +
    "\001\002\000\052\020\ufff7\024\ufff7\030\ufff7\031\ufff7\033" +
    "\ufff7\046\ufff7\047\243\050\ufff7\051\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\060\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\001\002\000\026\005\uffd3\007\240" +
    "\015\uffd3\016\uffd3\021\uffd3\031\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\066\uffd3\001\002\000\024\005\140\015\141\016\137" +
    "\021\136\031\146\050\152\051\145\052\151\066\144\001" +
    "\002\000\004\004\236\001\002\000\050\020\ufff0\024\ufff0" +
    "\030\ufff0\031\ufff0\033\ufff0\046\ufff0\050\ufff0\051\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\060\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\070\ufff0\001\002\000\050\020" +
    "\ufffb\024\ufffb\030\ufffb\031\ufffb\033\ufffb\046\ufffb\050\ufffb" +
    "\051\ufffb\054\ufffb\055\ufffb\056\ufffb\060\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\001\002" +
    "\000\004\023\231\001\002\000\004\032\227\001\002\000" +
    "\050\020\ufff5\024\ufff5\030\ufff5\031\ufff5\033\ufff5\046\ufff5" +
    "\050\ufff5\051\ufff5\054\ufff5\055\ufff5\056\ufff5\060\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5" +
    "\001\002\000\050\020\uffef\024\uffef\030\uffef\031\uffef\033" +
    "\uffef\046\uffef\050\uffef\051\uffef\054\uffef\055\uffef\056\uffef" +
    "\060\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067" +
    "\uffef\070\uffef\001\002\000\004\004\226\001\002\000\024" +
    "\005\uffcc\015\uffcc\016\uffcc\021\uffcc\031\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\066\uffcc\001\002\000\024\005\uffd1\015\uffd1" +
    "\016\uffd1\021\uffd1\031\uffd1\050\uffd1\051\uffd1\052\uffd1\066" +
    "\uffd1\001\002\000\004\004\225\001\002\000\024\005\uffcf" +
    "\015\uffcf\016\uffcf\021\uffcf\031\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\066\uffcf\001\002\000\004\004\224\001\002\000\050" +
    "\020\ufff1\024\ufff1\030\ufff1\031\ufff1\033\ufff1\046\ufff1\050" +
    "\ufff1\051\ufff1\054\ufff1\055\ufff1\056\ufff1\060\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\001" +
    "\002\000\024\005\uffce\015\uffce\016\uffce\021\uffce\031\uffce" +
    "\050\uffce\051\uffce\052\uffce\066\uffce\001\002\000\004\004" +
    "\223\001\002\000\004\005\214\001\002\000\050\020\ufff6" +
    "\024\ufff6\030\ufff6\031\ufff6\033\ufff6\046\ufff6\050\ufff6\051" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\060\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\001\002\000" +
    "\050\020\ufff4\024\ufff4\030\ufff4\031\ufff4\033\ufff4\046\ufff4" +
    "\050\ufff4\051\ufff4\054\ufff4\055\ufff4\056\ufff4\060\ufff4\062" +
    "\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4" +
    "\001\002\000\004\027\130\001\002\000\004\005\077\001" +
    "\002\000\004\064\100\001\002\000\004\031\101\001\002" +
    "\000\016\032\104\037\103\040\102\041\106\042\110\043" +
    "\105\001\002\000\004\015\uffb0\001\002\000\004\015\uffaf" +
    "\001\002\000\004\015\uffb1\001\002\000\004\015\uffac\001" +
    "\002\000\004\015\uffae\001\002\000\004\015\111\001\002" +
    "\000\004\015\uffad\001\002\000\004\004\112\001\002\000" +
    "\004\031\113\001\002\000\016\032\104\037\103\040\102" +
    "\041\106\042\110\043\105\001\002\000\004\015\115\001" +
    "\002\000\004\004\116\001\002\000\004\031\117\001\002" +
    "\000\004\011\120\001\002\000\004\011\121\001\002\000" +
    "\004\006\122\001\002\000\004\027\123\001\002\000\042" +
    "\020\uffe6\024\uffe6\031\uffe6\033\uffe6\046\uffe6\050\uffe6\051" +
    "\uffe6\054\uffe6\056\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\070\uffe6\001\002\000\042\020\050\024" +
    "\055\031\056\033\072\046\046\050\070\051\043\054\040" +
    "\056\066\062\075\063\076\064\045\065\063\066\044\067" +
    "\065\070\062\001\002\000\044\020\050\024\055\030\127" +
    "\031\056\033\072\046\046\050\070\051\043\054\040\056" +
    "\066\062\075\063\076\064\045\065\063\066\044\067\065" +
    "\070\062\001\002\000\050\020\ufffc\024\ufffc\030\ufffc\031" +
    "\ufffc\033\ufffc\046\ufffc\050\ufffc\051\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\060\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\001\002\000\050\020\uffe5\024\uffe5" +
    "\030\uffe5\031\uffe5\033\uffe5\046\uffe5\050\uffe5\051\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\060\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\070\uffe5\001\002\000\042\020" +
    "\uffe8\024\uffe8\031\uffe8\033\uffe8\046\uffe8\050\uffe8\051\uffe8" +
    "\054\uffe8\056\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\070\uffe8\001\002\000\042\020\050\024\055" +
    "\031\056\033\072\046\046\050\070\051\043\054\040\056" +
    "\066\062\075\063\076\064\045\065\063\066\044\067\065" +
    "\070\062\001\002\000\044\020\050\024\055\030\133\031" +
    "\056\033\072\046\046\050\070\051\043\054\040\056\066" +
    "\062\075\063\076\064\045\065\063\066\044\067\065\070" +
    "\062\001\002\000\004\046\134\001\002\000\004\005\135" +
    "\001\002\000\024\005\140\015\141\016\137\021\136\031" +
    "\146\050\152\051\145\052\151\066\144\001\002\000\046" +
    "\004\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\032\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\053\uffc2\057\uffc2\001\002\000" +
    "\046\004\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\032\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\053\uffc8\057\uffc8\001\002" +
    "\000\024\005\140\015\141\016\137\021\136\031\146\050" +
    "\152\051\145\052\151\066\144\001\002\000\046\004\uffc9" +
    "\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\032" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\053\uffc9\057\uffc9\001\002\000\046\004" +
    "\uffca\006\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\032\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\053\uffca\057\uffca\001\002\000\040" +
    "\006\210\011\162\012\156\013\161\014\164\032\165\036" +
    "\155\037\163\040\157\041\171\042\160\043\167\044\170" +
    "\045\154\053\166\001\002\000\046\004\uffc7\006\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\032\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\053\uffc7\057\uffc7\001\002\000\046\004\uffc3\006\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\032\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\053\uffc3\057\uffc3\001\002\000\046\004\uffc5\006" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\032\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\053\uffc5\057\uffc5\001\002\000\046\004\uffc6" +
    "\006\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\032" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\053\uffc6\057\uffc6\001\002\000\046\004" +
    "\uffcb\006\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\032\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\053\uffcb\057\uffcb\001\002\000\024" +
    "\005\140\015\141\016\137\021\136\031\146\050\152\051" +
    "\145\052\151\066\144\001\002\000\046\004\uffc4\006\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\032\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\053\uffc4\057\uffc4\001\002\000\046\004\uffb2\006" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\032\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\053\uffb2\057\uffb2\001\002\000\024\005\140" +
    "\015\141\016\137\021\136\031\146\050\152\051\145\052" +
    "\151\066\144\001\002\000\024\005\140\015\141\016\137" +
    "\021\136\031\146\050\152\051\145\052\151\066\144\001" +
    "\002\000\024\005\140\015\141\016\137\021\136\031\146" +
    "\050\152\051\145\052\151\066\144\001\002\000\024\005" +
    "\140\015\141\016\137\021\136\031\146\050\152\051\145" +
    "\052\151\066\144\001\002\000\024\005\140\015\141\016" +
    "\137\021\136\031\146\050\152\051\145\052\151\066\144" +
    "\001\002\000\024\005\140\015\141\016\137\021\136\031" +
    "\146\050\152\051\145\052\151\066\144\001\002\000\024" +
    "\005\140\015\141\016\137\021\136\031\146\050\152\051" +
    "\145\052\151\066\144\001\002\000\024\005\140\015\141" +
    "\016\137\021\136\031\146\050\152\051\145\052\151\066" +
    "\144\001\002\000\024\005\140\015\141\016\137\021\136" +
    "\031\146\050\152\051\145\052\151\066\144\001\002\000" +
    "\024\005\140\015\141\016\137\021\136\031\146\050\152" +
    "\051\145\052\151\066\144\001\002\000\024\005\140\015" +
    "\141\016\137\021\136\031\146\050\152\051\145\052\151" +
    "\066\144\001\002\000\024\005\140\015\141\016\137\021" +
    "\136\031\146\050\152\051\145\052\151\066\144\001\002" +
    "\000\024\005\140\015\141\016\137\021\136\031\146\050" +
    "\152\051\145\052\151\066\144\001\002\000\024\005\140" +
    "\015\141\016\137\021\136\031\146\050\152\051\145\052" +
    "\151\066\144\001\002\000\046\004\uffb7\006\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\032\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\053\uffb7\057\uffb7\001\002\000\046\004\uffb4\006\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\032\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\053\uffb4\057\uffb4\001\002\000\046\004\uffb5\006\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\032\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\053\uffb5\057\uffb5\001\002\000\046\004\uffbb\006" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\032\uffbb" +
    "\036\155\037\163\040\157\041\171\042\160\043\167\044" +
    "\170\045\154\053\166\057\uffbb\001\002\000\046\004\uffbc" +
    "\006\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\032" +
    "\uffbc\036\155\037\163\040\157\041\171\042\160\043\167" +
    "\044\170\045\154\053\166\057\uffbc\001\002\000\046\004" +
    "\uffbd\006\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\032\165\036\155\037\163\040\157\041\171\042\160\043" +
    "\167\044\170\045\154\053\166\057\uffbd\001\002\000\046" +
    "\004\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\032\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\053\uffb8\057\uffb8\001\002\000" +
    "\046\004\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013\161" +
    "\014\164\032\165\036\155\037\163\040\157\041\171\042" +
    "\160\043\167\044\170\045\154\053\166\057\uffc0\001\002" +
    "\000\046\004\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\032\165\036\155\037\163\040\157\041\171" +
    "\042\160\043\167\044\170\045\154\053\166\057\uffbe\001" +
    "\002\000\046\004\uffb6\006\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\032\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\053\uffb6\057\uffb6" +
    "\001\002\000\046\004\uffb9\006\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\032\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\053\uffb9\057" +
    "\uffb9\001\002\000\046\004\uffbf\006\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\161\014\164\032\165\036\155\037\163\040" +
    "\157\041\171\042\160\043\167\044\170\045\154\053\166" +
    "\057\uffbf\001\002\000\046\004\uffba\006\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\032\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\053" +
    "\uffba\057\uffba\001\002\000\046\004\uffb3\006\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\014\uffb3\032\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\053\uffb3\057\uffb3\001\002\000\004\004\211\001\002\000" +
    "\050\020\uffe7\024\uffe7\030\uffe7\031\uffe7\033\uffe7\046\uffe7" +
    "\050\uffe7\051\uffe7\054\uffe7\055\uffe7\056\uffe7\060\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\001\002\000\040\006\213\011\162\012\156\013\161\014" +
    "\164\032\165\036\155\037\163\040\157\041\171\042\160" +
    "\043\167\044\170\045\154\053\166\001\002\000\046\004" +
    "\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\032\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\053\uffc1\057\uffc1\001\002\000\024" +
    "\005\140\015\141\016\137\021\136\031\146\050\152\051" +
    "\145\052\151\066\144\001\002\000\040\006\216\011\162" +
    "\012\156\013\161\014\164\032\165\036\155\037\163\040" +
    "\157\041\171\042\160\043\167\044\170\045\154\053\166" +
    "\001\002\000\004\027\217\001\002\000\042\020\uffe4\024" +
    "\uffe4\031\uffe4\033\uffe4\046\uffe4\050\uffe4\051\uffe4\054\uffe4" +
    "\056\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067" +
    "\uffe4\070\uffe4\001\002\000\042\020\050\024\055\031\056" +
    "\033\072\046\046\050\070\051\043\054\040\056\066\062" +
    "\075\063\076\064\045\065\063\066\044\067\065\070\062" +
    "\001\002\000\044\020\050\024\055\030\222\031\056\033" +
    "\072\046\046\050\070\051\043\054\040\056\066\062\075" +
    "\063\076\064\045\065\063\066\044\067\065\070\062\001" +
    "\002\000\052\020\uffe3\024\uffe3\030\uffe3\031\uffe3\033\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\060\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\070\uffe3\001\002\000\050\020\ufff2\024\ufff2\030" +
    "\ufff2\031\ufff2\033\ufff2\046\ufff2\050\ufff2\051\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\067\ufff2\070\ufff2\001\002\000\050\020\uffd4" +
    "\024\uffd4\030\uffd4\031\uffd4\033\uffd4\046\uffd4\050\uffd4\051" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\001\002\000" +
    "\050\020\ufffa\024\ufffa\030\ufffa\031\ufffa\033\ufffa\046\ufffa" +
    "\050\ufffa\051\ufffa\054\ufffa\055\ufffa\056\ufffa\060\ufffa\062" +
    "\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa" +
    "\001\002\000\050\020\ufff8\024\ufff8\030\ufff8\031\ufff8\033" +
    "\ufff8\046\ufff8\050\ufff8\051\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\060\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067" +
    "\ufff8\070\ufff8\001\002\000\024\005\140\015\141\016\137" +
    "\021\136\031\146\050\152\051\145\052\151\066\144\001" +
    "\002\000\040\004\uffeb\011\162\012\156\013\161\014\164" +
    "\032\165\036\155\037\163\040\157\041\171\042\160\043" +
    "\167\044\170\045\154\053\166\001\002\000\004\022\232" +
    "\001\002\000\004\005\233\001\002\000\024\005\140\015" +
    "\141\016\137\021\136\031\146\050\152\051\145\052\151" +
    "\066\144\001\002\000\040\006\235\011\162\012\156\013" +
    "\161\014\164\032\165\036\155\037\163\040\157\041\171" +
    "\042\160\043\167\044\170\045\154\053\166\001\002\000" +
    "\004\004\uffed\001\002\000\050\020\ufff9\024\ufff9\030\ufff9" +
    "\031\ufff9\033\ufff9\046\ufff9\050\ufff9\051\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\060\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\001\002\000\040\004\uffec\011" +
    "\162\012\156\013\161\014\164\032\165\036\155\037\163" +
    "\040\157\041\171\042\160\043\167\044\170\045\154\053" +
    "\166\001\002\000\024\005\140\015\141\016\137\021\136" +
    "\031\146\050\152\051\145\052\151\066\144\001\002\000" +
    "\040\010\242\011\162\012\156\013\161\014\164\032\165" +
    "\036\155\037\163\040\157\041\171\042\160\043\167\044" +
    "\170\045\154\053\166\001\002\000\004\004\uffee\001\002" +
    "\000\006\027\uffe2\033\uffe2\001\002\000\006\027\251\033" +
    "\072\001\002\000\050\020\uffdf\024\uffdf\030\uffdf\031\uffdf" +
    "\033\uffdf\046\uffdf\050\uffdf\051\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\060\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\067\uffdf\070\uffdf\001\002\000\052\020\uffe0\024\uffe0\030" +
    "\uffe0\031\uffe0\033\uffe0\046\uffe0\047\243\050\uffe0\051\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\060\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\001\002\000\050" +
    "\020\uffe1\024\uffe1\030\uffe1\031\uffe1\033\uffe1\046\uffe1\050" +
    "\uffe1\051\uffe1\054\uffe1\055\uffe1\056\uffe1\060\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\001" +
    "\002\000\050\020\uffde\024\uffde\030\uffde\031\uffde\033\uffde" +
    "\046\uffde\050\uffde\051\uffde\054\uffde\055\uffde\056\uffde\060" +
    "\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde" +
    "\070\uffde\001\002\000\042\020\uffdd\024\uffdd\031\uffdd\033" +
    "\uffdd\046\uffdd\050\uffdd\051\uffdd\054\uffdd\056\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\001" +
    "\002\000\042\020\050\024\055\031\056\033\072\046\046" +
    "\050\070\051\043\054\040\056\066\062\075\063\076\064" +
    "\045\065\063\066\044\067\065\070\062\001\002\000\044" +
    "\020\050\024\055\030\254\031\056\033\072\046\046\050" +
    "\070\051\043\054\040\056\066\062\075\063\076\064\045" +
    "\065\063\066\044\067\065\070\062\001\002\000\050\020" +
    "\uffdc\024\uffdc\030\uffdc\031\uffdc\033\uffdc\046\uffdc\050\uffdc" +
    "\051\uffdc\054\uffdc\055\uffdc\056\uffdc\060\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\001\002" +
    "\000\024\005\140\015\141\016\137\021\136\031\146\050" +
    "\152\051\145\052\151\066\144\001\002\000\040\006\257" +
    "\011\162\012\156\013\161\014\164\032\165\036\155\037" +
    "\163\040\157\041\171\042\160\043\167\044\170\045\154" +
    "\053\166\001\002\000\004\027\260\001\002\000\042\020" +
    "\uffea\024\uffea\031\uffea\033\uffea\046\uffea\050\uffea\051\uffea" +
    "\054\uffea\056\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\067\uffea\070\uffea\001\002\000\042\020\050\024\055" +
    "\031\056\033\072\046\046\050\070\051\043\054\040\056" +
    "\066\062\075\063\076\064\045\065\063\066\044\067\065" +
    "\070\062\001\002\000\044\020\050\024\055\030\263\031" +
    "\056\033\072\046\046\050\070\051\043\054\040\056\066" +
    "\062\075\063\076\064\045\065\063\066\044\067\065\070" +
    "\062\001\002\000\050\020\uffe9\024\uffe9\030\uffe9\031\uffe9" +
    "\033\uffe9\046\uffe9\050\uffe9\051\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\060\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\001\002\000\004\002\ufffd\001\002\000" +
    "\024\005\140\015\141\016\137\021\136\031\146\050\152" +
    "\051\145\052\151\066\144\001\002\000\040\006\267\011" +
    "\162\012\156\013\161\014\164\032\165\036\155\037\163" +
    "\040\157\041\171\042\160\043\167\044\170\045\154\053" +
    "\166\001\002\000\004\027\270\001\002\000\006\055\uffdb" +
    "\060\uffdb\001\002\000\006\055\273\060\272\001\002\000" +
    "\004\057\303\001\002\000\024\005\140\015\141\016\137" +
    "\021\136\031\146\050\152\051\145\052\151\066\144\001" +
    "\002\000\004\030\300\001\002\000\042\020\050\024\055" +
    "\031\056\033\072\046\046\050\070\051\043\054\040\056" +
    "\066\062\075\063\076\064\045\065\063\066\044\067\065" +
    "\070\062\001\002\000\050\020\050\024\055\030\uffd7\031" +
    "\056\033\072\046\046\050\070\051\043\054\040\055\273" +
    "\056\066\060\272\062\075\063\076\064\045\065\063\066" +
    "\044\067\065\070\062\001\002\000\004\030\uffd8\001\002" +
    "\000\050\020\uffda\024\uffda\030\uffda\031\uffda\033\uffda\046" +
    "\uffda\050\uffda\051\uffda\054\uffda\055\uffda\056\uffda\060\uffda" +
    "\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070" +
    "\uffda\001\002\000\040\011\162\012\156\013\161\014\164" +
    "\032\165\036\155\037\163\040\157\041\171\042\160\043" +
    "\167\044\170\045\154\053\166\057\302\001\002\000\042" +
    "\020\uffd9\024\uffd9\031\uffd9\033\uffd9\046\uffd9\050\uffd9\051" +
    "\uffd9\054\uffd9\056\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\066\uffd9\067\uffd9\070\uffd9\001\002\000\042\020\uffd6\024" +
    "\uffd6\031\uffd6\033\uffd6\046\uffd6\050\uffd6\051\uffd6\054\uffd6" +
    "\056\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067" +
    "\uffd6\070\uffd6\001\002\000\042\020\050\024\055\031\056" +
    "\033\072\046\046\050\070\051\043\054\040\056\066\062" +
    "\075\063\076\064\045\065\063\066\044\067\065\070\062" +
    "\001\002\000\044\020\050\024\055\030\uffd5\031\056\033" +
    "\072\046\046\050\070\051\043\054\040\056\066\062\075" +
    "\063\076\064\045\065\063\066\044\067\065\070\062\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\012\002\003\017\010\020\004\027\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\011\031\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\023\031\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\041\004\053\006\063\007\051\010\060\011" +
    "\050\012\046\014\072\015\056\021\073\024\040\033\070" +
    "\034\066\035\052\037\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\125\006\063\007\051\010\060" +
    "\011\050\012\046\014\072\015\056\021\073\024\040\033" +
    "\070\034\066\035\052\037\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\236\013\141" +
    "\016\147\032\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\123\001\001\000\040" +
    "\003\124\004\053\006\063\007\051\010\060\011\050\012" +
    "\046\014\072\015\056\021\073\024\040\033\070\034\066" +
    "\035\052\037\057\001\001\000\036\004\125\006\063\007" +
    "\051\010\060\011\050\012\046\014\072\015\056\021\073" +
    "\024\040\033\070\034\066\035\052\037\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\130\001\001" +
    "\000\040\003\131\004\053\006\063\007\051\010\060\011" +
    "\050\012\046\014\072\015\056\021\073\024\040\033\070" +
    "\034\066\035\052\037\057\001\001\000\036\004\125\006" +
    "\063\007\051\010\060\011\050\012\046\014\072\015\056" +
    "\021\073\024\040\033\070\034\066\035\052\037\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\142" +
    "\013\141\016\147\032\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\211\013\141\016\147\032\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\152\013" +
    "\141\016\147\032\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\206\013\141\016\147\032\146\001" +
    "\001\000\012\005\205\013\141\016\147\032\146\001\001" +
    "\000\012\005\204\013\141\016\147\032\146\001\001\000" +
    "\012\005\203\013\141\016\147\032\146\001\001\000\012" +
    "\005\202\013\141\016\147\032\146\001\001\000\012\005" +
    "\201\013\141\016\147\032\146\001\001\000\012\005\200" +
    "\013\141\016\147\032\146\001\001\000\012\005\177\013" +
    "\141\016\147\032\146\001\001\000\012\005\176\013\141" +
    "\016\147\032\146\001\001\000\012\005\175\013\141\016" +
    "\147\032\146\001\001\000\012\005\174\013\141\016\147" +
    "\032\146\001\001\000\012\005\173\013\141\016\147\032" +
    "\146\001\001\000\012\005\172\013\141\016\147\032\146" +
    "\001\001\000\012\005\171\013\141\016\147\032\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\214\013" +
    "\141\016\147\032\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\217\001\001\000\040\003\220\004" +
    "\053\006\063\007\051\010\060\011\050\012\046\014\072" +
    "\015\056\021\073\024\040\033\070\034\066\035\052\037" +
    "\057\001\001\000\036\004\125\006\063\007\051\010\060" +
    "\011\050\012\046\014\072\015\056\021\073\024\040\033" +
    "\070\034\066\035\052\037\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\227\013\141\016\147\032\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\233\013\141\016\147\032\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\240\013\141\016\147\032\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\243\001\001\000\012\012\245\021\247\022\246\023\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\251\001\001\000\040" +
    "\003\252\004\053\006\063\007\051\010\060\011\050\012" +
    "\046\014\072\015\056\021\073\024\040\033\070\034\066" +
    "\035\052\037\057\001\001\000\036\004\125\006\063\007" +
    "\051\010\060\011\050\012\046\014\072\015\056\021\073" +
    "\024\040\033\070\034\066\035\052\037\057\001\001\000" +
    "\002\001\001\000\012\005\255\013\141\016\147\032\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\260\001\001\000\040\003\261\004\053\006\063\007\051" +
    "\010\060\011\050\012\046\014\072\015\056\021\073\024" +
    "\040\033\070\034\066\035\052\037\057\001\001\000\036" +
    "\004\125\006\063\007\051\010\060\011\050\012\046\014" +
    "\072\015\056\021\073\024\040\033\070\034\066\035\052" +
    "\037\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\265\013\141\016\147\032\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\270\001\001\000" +
    "\006\025\273\026\274\001\001\000\002\001\001\000\012" +
    "\005\300\013\141\016\147\032\146\001\001\000\002\001" +
    "\001\000\040\003\275\004\053\006\063\007\051\010\060" +
    "\011\050\012\046\014\072\015\056\021\073\024\040\033" +
    "\070\034\066\035\052\037\057\001\001\000\042\004\125" +
    "\006\063\007\051\010\060\011\050\012\046\014\072\015" +
    "\056\021\073\024\040\025\276\026\274\033\070\034\066" +
    "\035\052\037\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\303" +
    "\001\001\000\040\003\304\004\053\006\063\007\051\010" +
    "\060\011\050\012\046\014\072\015\056\021\073\024\040" +
    "\033\070\034\066\035\052\037\057\001\001\000\036\004" +
    "\125\006\063\007\051\010\060\011\050\012\046\014\072" +
    "\015\056\021\073\024\040\033\070\034\066\035\052\037" +
    "\057\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public static ArrayList<String> Traduccion = new ArrayList<String>();
    public static ArrayList<String> Grafica = new ArrayList<String>();
    public static ArrayList<String> Valores = new ArrayList<String>();
    public static ArrayList<Exception_> erroresSintacticos = new ArrayList<Exception_>(); //ArrayList del los errores sintacticos
    public static String tabuladores = "";
    public static int reduccionDeTabulaciones = 0;
    public static String else_ = "";
    public static String title = "";
    public static String ejex = "";
    public static String ejey = "";


    public void syntax_error(Symbol s){

        erroresSintacticos.add(new Exception_("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right) );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= JSON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= VOID MAIN PAR_IZQ PAR_DER CHR_IZQ instrucciones CHR_DER 
            {
              Object RESULT =null;
		 tabuladores =""; reduccionDeTabulaciones= 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= sentencia PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= sumar PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= declaracion PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= vacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= Sentencia_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= INSTANCIA PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= CICLO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= CONBREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sumar ::= REVALUAR COR_IZQ expresion COR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    //System.out.println("El valor de la expresión es: "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= IMPRIMIR PUNTO WRITE PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Traduccion.add(tabuladores+"print("+a+")");
    //System.out.println("print("+a+")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= tipoDato expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Traduccion.add(tabuladores+b);
    //System.out.println("Declaración encontrada: "+a+" con valor: "+b) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTANCIA ::= ID IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Traduccion.add(tabuladores+a +" = " +b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"while "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    //System.out.println("if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_while ::= ENCICLADO PAR_IZQ expresion PAR_DER CHR_IZQ NT$0 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =null;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"while true");
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DO_WHILE ::= RDO CHR_IZQ NT$1 instrucciones CHR_DER ENCICLADO PAR_IZQ expresion PAR_DER PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"for "+a+" in "+" range "+"("+b+","+c+")");
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CICLO_FOR ::= FOR PAR_IZQ PRUEBA ID comparativa ENTERO PTCOMA ID comparativa ENTERO PTCOMA ID MAS MAS PAR_DER CHR_IZQ NT$2 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_+"if "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= RIF PAR_IZQ expresion PAR_DER CHR_IZQ NT$3 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              Object RESULT =null;

    else_ = "else ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Sentencia_else ::= condicion DESIF NT$4 sentencia_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_if ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia_if ::= else_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_if ::= Sentencia_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT =null;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // else_simple ::= CHR_IZQ NT$5 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_simple",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add("match "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_switch ::= RSWITCH PAR_IZQ expresion PAR_DER CHR_IZQ NT$6 CASES CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASO ::= RCASE expresion DOSPT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Traduccion.add("case "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASES ::= CASO instrucciones CASES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASES ::= CASO instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =null;
Traduccion.add("default"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASES ::= DEFECTO DOSPT NT$7 instrucciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONBREAK ::= RBREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONBREAK",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoDato ::= REVALUAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoDato ::= PRUEBA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoDato ::= VARCHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoDato ::= VARBOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDato ::= VARSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDato ::= BOOLTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDato ::= BOOLFAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDato ::= VARDOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= VARBOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= BOOLTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= BOOLFAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "+" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "-" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "*" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones ::= expresion DIV expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "/" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operaciones ::= expresion IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "=" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones ::= expresion COMMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "," + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comparacion ::= expresion IGUALDAD expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comparacion ::= expresion MAYOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comparacion ::= expresion MENOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comparacion ::= expresion DIFERENTE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logica ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logica ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // logica ::= NEGACION expresion 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparativa ::= IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparativa ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparativa ::= MENOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparativa ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparativa ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparativa ::= DIFERENTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // JSON ::= CHR_IZQ sentencias_json CHR_DER 
            {
              Object RESULT =null;
		
System.out.println("HE Recibido un JSON");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencias_json ::= sentencia_json 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_json",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencias_json ::= sentencia_json COMMA sentencias_json 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_json",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia_json ::= TITLE DOSPT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 title = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia_json ::= EJEX DOSPT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ejex = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia_json ::= EJEY DOSPT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ejey = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia_json ::= CADENA DOSPT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Grafica.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia_json ::= CADENA DOSPT DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Valores.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Variables_globales ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables_globales",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

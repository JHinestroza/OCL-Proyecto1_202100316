
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import Errores.Exception_;
import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\017" +
    "\003\000\002\017\003\000\002\044\002\000\002\017\012" +
    "\000\002\017\004\000\002\003\004\000\002\003\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\007\006\000\002\006\010\000\002" +
    "\010\004\000\002\033\005\000\002\045\002\000\002\014" +
    "\012\000\002\046\002\000\002\034\014\000\002\047\002" +
    "\000\002\035\025\000\002\050\002\000\002\012\012\000" +
    "\002\051\002\000\002\021\006\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\052\002\000\002\023" +
    "\006\000\002\053\002\000\002\024\012\000\002\026\005" +
    "\000\002\025\005\000\002\025\004\000\002\054\002\000" +
    "\002\025\006\000\002\037\004\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\004\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\027\005\000\002\030\003\000\002\030" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\041\003\000" +
    "\002\041\003\000\002\040\011\000\002\042\007\000\002" +
    "\042\007\000\002\043\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\010\003\006\026\010\027\011\001\002\000" +
    "\004\002\344\001\002\000\004\002\uffff\001\002\000\004" +
    "\030\343\001\002\000\004\002\ufffe\001\002\000\004\025" +
    "\035\001\002\000\012\021\020\034\015\035\014\064\016" +
    "\001\002\000\004\002\000\001\002\000\004\030\034\001" +
    "\002\000\004\062\032\001\002\000\004\062\030\001\002" +
    "\000\004\062\026\001\002\000\006\030\uffa5\056\024\001" +
    "\002\000\004\062\021\001\002\000\006\016\022\021\023" +
    "\001\002\000\006\030\uff9f\056\uff9f\001\002\000\006\030" +
    "\uffa0\056\uffa0\001\002\000\012\021\020\034\015\035\014" +
    "\064\016\001\002\000\004\030\uffa4\001\002\000\004\021" +
    "\027\001\002\000\006\030\uffa3\056\uffa3\001\002\000\004" +
    "\021\031\001\002\000\006\030\uffa2\056\uffa2\001\002\000" +
    "\004\021\033\001\002\000\006\030\uffa1\056\uffa1\001\002" +
    "\000\004\002\uffa6\001\002\000\004\005\036\001\002\000" +
    "\004\006\ufffd\001\002\000\004\006\040\001\002\000\004" +
    "\027\041\001\002\000\044\020\052\024\057\026\103\031" +
    "\060\033\075\051\050\053\074\054\045\057\042\061\071" +
    "\065\101\066\102\070\047\071\066\072\046\073\070\074" +
    "\064\001\002\000\004\005\322\001\002\000\052\020\ufff1" +
    "\024\ufff1\026\ufff1\030\ufff1\031\ufff1\033\ufff1\051\ufff1\053" +
    "\ufff1\054\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1\065\ufff1" +
    "\066\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\001" +
    "\002\000\046\020\052\024\057\026\103\030\321\031\060" +
    "\033\075\051\050\053\074\054\045\057\042\061\071\065" +
    "\101\066\102\070\047\071\066\072\046\073\070\074\064" +
    "\001\002\000\026\005\uffc9\015\uffc9\016\uffc9\021\uffc9\031" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\067\uffc9\072\uffc9\001\002" +
    "\000\026\005\uffcc\015\uffcc\016\uffcc\021\uffcc\031\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\067\uffcc\072\uffcc\001\002\000\026" +
    "\005\uffce\015\uffce\016\uffce\021\uffce\031\uffce\053\uffce\054" +
    "\uffce\055\uffce\067\uffce\072\uffce\001\002\000\004\005\312" +
    "\001\002\000\054\020\ufff5\024\ufff5\026\ufff5\030\ufff5\031" +
    "\ufff5\033\ufff5\051\ufff5\052\300\053\ufff5\054\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\063\ufff5\065\ufff5\066\ufff5\070\ufff5\071" +
    "\ufff5\072\ufff5\073\ufff5\074\ufff5\001\002\000\030\005\uffcf" +
    "\007\275\015\uffcf\016\uffcf\021\uffcf\031\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\067\uffcf\072\uffcf\001\002\000\026\005\174" +
    "\015\175\016\173\021\172\031\201\053\206\054\202\055" +
    "\205\067\207\072\200\001\002\000\004\004\273\001\002" +
    "\000\052\020\ufff9\024\ufff9\026\ufff9\030\ufff9\031\ufff9\033" +
    "\ufff9\051\ufff9\053\ufff9\054\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\063\ufff9\065\ufff9\066\ufff9\070\ufff9\071\ufff9\072\ufff9\073" +
    "\ufff9\074\ufff9\001\002\000\052\020\uffee\024\uffee\026\uffee" +
    "\030\uffee\031\uffee\033\uffee\051\uffee\053\uffee\054\uffee\057" +
    "\uffee\060\uffee\061\uffee\063\uffee\065\uffee\066\uffee\070\uffee" +
    "\071\uffee\072\uffee\073\uffee\074\uffee\001\002\000\004\023" +
    "\266\001\002\000\004\032\264\001\002\000\052\020\uffed" +
    "\024\uffed\026\uffed\030\uffed\031\uffed\033\uffed\051\uffed\053" +
    "\uffed\054\uffed\057\uffed\060\uffed\061\uffed\063\uffed\065\uffed" +
    "\066\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed\001" +
    "\002\000\052\020\ufff3\024\ufff3\026\ufff3\030\ufff3\031\ufff3" +
    "\033\ufff3\051\ufff3\053\ufff3\054\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\063\ufff3\065\ufff3\066\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\073\ufff3\074\ufff3\001\002\000\052\020\uffeb\024\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\033\uffeb\051\uffeb\053\uffeb\054\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\063\uffeb\065\uffeb\066\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\001\002\000\026" +
    "\005\uffc8\015\uffc8\016\uffc8\021\uffc8\031\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\067\uffc8\072\uffc8\001\002\000\004\004\263" +
    "\001\002\000\026\005\uffcd\015\uffcd\016\uffcd\021\uffcd\031" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\067\uffcd\072\uffcd\001\002" +
    "\000\004\004\262\001\002\000\026\005\uffcb\015\uffcb\016" +
    "\uffcb\021\uffcb\031\uffcb\053\uffcb\054\uffcb\055\uffcb\067\uffcb" +
    "\072\uffcb\001\002\000\004\004\261\001\002\000\052\020" +
    "\uffef\024\uffef\026\uffef\030\uffef\031\uffef\033\uffef\051\uffef" +
    "\053\uffef\054\uffef\057\uffef\060\uffef\061\uffef\063\uffef\065" +
    "\uffef\066\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef" +
    "\001\002\000\004\004\260\001\002\000\026\005\uffca\015" +
    "\uffca\016\uffca\021\uffca\031\uffca\053\uffca\054\uffca\055\uffca" +
    "\067\uffca\072\uffca\001\002\000\004\005\251\001\002\000" +
    "\052\020\ufff4\024\ufff4\026\ufff4\030\ufff4\031\ufff4\033\ufff4" +
    "\051\ufff4\053\ufff4\054\ufff4\057\ufff4\060\ufff4\061\ufff4\063" +
    "\ufff4\065\ufff4\066\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\001\002\000\052\020\ufff2\024\ufff2\026\ufff2\030" +
    "\ufff2\031\ufff2\033\ufff2\051\ufff2\053\ufff2\054\ufff2\057\ufff2" +
    "\060\ufff2\061\ufff2\063\ufff2\065\ufff2\066\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\001\002\000\052\020\uffec" +
    "\024\uffec\026\uffec\030\uffec\031\uffec\033\uffec\051\uffec\053" +
    "\uffec\054\uffec\057\uffec\060\uffec\061\uffec\063\uffec\065\uffec" +
    "\066\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\001" +
    "\002\000\004\027\164\001\002\000\004\005\133\001\002" +
    "\000\010\036\104\037\105\040\107\001\002\000\004\005" +
    "\uff9d\001\002\000\004\005\uff9e\001\002\000\004\005\114" +
    "\001\002\000\004\005\110\001\002\000\004\006\111\001" +
    "\002\000\004\027\112\001\002\000\004\030\113\001\002" +
    "\000\052\020\uff99\024\uff99\026\uff99\030\uff99\031\uff99\033" +
    "\uff99\051\uff99\053\uff99\054\uff99\057\uff99\060\uff99\061\uff99" +
    "\063\uff99\065\uff99\066\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\074\uff99\001\002\000\004\006\115\001\002\000\004" +
    "\027\116\001\002\000\006\073\120\074\121\001\002\000" +
    "\004\030\132\001\002\000\004\031\126\001\002\000\004" +
    "\031\122\001\002\000\004\032\123\001\002\000\004\016" +
    "\124\001\002\000\004\004\125\001\002\000\004\030\uff9a" +
    "\001\002\000\004\032\127\001\002\000\004\021\130\001" +
    "\002\000\004\004\131\001\002\000\004\030\uff9b\001\002" +
    "\000\052\020\uff9c\024\uff9c\026\uff9c\030\uff9c\031\uff9c\033" +
    "\uff9c\051\uff9c\053\uff9c\054\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\063\uff9c\065\uff9c\066\uff9c\070\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\074\uff9c\001\002\000\004\070\134\001\002\000\004" +
    "\031\135\001\002\000\016\032\140\042\137\043\136\044" +
    "\142\045\144\046\141\001\002\000\004\015\uffab\001\002" +
    "\000\004\015\uffaa\001\002\000\004\015\uffac\001\002\000" +
    "\004\015\uffa7\001\002\000\004\015\uffa9\001\002\000\004" +
    "\015\145\001\002\000\004\015\uffa8\001\002\000\004\004" +
    "\146\001\002\000\004\031\147\001\002\000\016\032\140" +
    "\042\137\043\136\044\142\045\144\046\141\001\002\000" +
    "\004\015\151\001\002\000\004\004\152\001\002\000\004" +
    "\031\153\001\002\000\004\011\154\001\002\000\004\011" +
    "\155\001\002\000\004\006\156\001\002\000\004\027\157" +
    "\001\002\000\044\020\uffe2\024\uffe2\026\uffe2\031\uffe2\033" +
    "\uffe2\051\uffe2\053\uffe2\054\uffe2\057\uffe2\061\uffe2\065\uffe2" +
    "\066\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\001" +
    "\002\000\044\020\052\024\057\026\103\031\060\033\075" +
    "\051\050\053\074\054\045\057\042\061\071\065\101\066" +
    "\102\070\047\071\066\072\046\073\070\074\064\001\002" +
    "\000\046\020\052\024\057\026\103\030\163\031\060\033" +
    "\075\051\050\053\074\054\045\057\042\061\071\065\101" +
    "\066\102\070\047\071\066\072\046\073\070\074\064\001" +
    "\002\000\052\020\ufffa\024\ufffa\026\ufffa\030\ufffa\031\ufffa" +
    "\033\ufffa\051\ufffa\053\ufffa\054\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\063\ufffa\065\ufffa\066\ufffa\070\ufffa\071\ufffa\072\ufffa" +
    "\073\ufffa\074\ufffa\001\002\000\052\020\uffe1\024\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\033\uffe1\051\uffe1\053\uffe1\054\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\063\uffe1\065\uffe1\066\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\001\002\000\044" +
    "\020\uffe4\024\uffe4\026\uffe4\031\uffe4\033\uffe4\051\uffe4\053" +
    "\uffe4\054\uffe4\057\uffe4\061\uffe4\065\uffe4\066\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\074\uffe4\001\002\000\044\020" +
    "\052\024\057\026\103\031\060\033\075\051\050\053\074" +
    "\054\045\057\042\061\071\065\101\066\102\070\047\071" +
    "\066\072\046\073\070\074\064\001\002\000\046\020\052" +
    "\024\057\026\103\030\167\031\060\033\075\051\050\053" +
    "\074\054\045\057\042\061\071\065\101\066\102\070\047" +
    "\071\066\072\046\073\070\074\064\001\002\000\004\051" +
    "\170\001\002\000\004\005\171\001\002\000\026\005\174" +
    "\015\175\016\173\021\172\031\201\053\206\054\202\055" +
    "\205\067\207\072\200\001\002\000\046\004\uffbe\006\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\032\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\056\uffbe\062\uffbe\001\002\000\046\004\uffc4\006" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\032\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\056\uffc4\062\uffc4\001\002\000\026\005\174" +
    "\015\175\016\173\021\172\031\201\053\206\054\202\055" +
    "\205\067\207\072\200\001\002\000\046\004\uffc5\006\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\032\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\056\uffc5\062\uffc5\001\002\000\046\004\uffc6\006" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\032\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\056\uffc6\062\uffc6\001\002\000\040\006\245" +
    "\011\217\012\213\013\216\014\221\032\223\041\212\042" +
    "\220\043\214\044\226\045\215\046\224\047\225\050\211" +
    "\056\222\001\002\000\046\004\uffc3\006\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\032\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\056" +
    "\uffc3\062\uffc3\001\002\000\046\004\uffc1\006\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\032\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\056\uffc1\062\uffc1\001\002\000\046\004\uffbf\006\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\032\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\056\uffbf\062\uffbf\001\002\000\046\004\uffc2\006\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\032\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\056\uffc2\062\uffc2\001\002\000\046\004\uffc7\006" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\032\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\056\uffc7\062\uffc7\001\002\000\026\005\174" +
    "\015\175\016\173\021\172\031\201\053\206\054\202\055" +
    "\205\067\207\072\200\001\002\000\046\004\uffc0\006\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\032\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\056\uffc0\062\uffc0\001\002\000\046\004\uffbd\006" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\032\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\056\uffbd\062\uffbd\001\002\000\046\004\uffad" +
    "\006\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\032" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\056\uffad\062\uffad\001\002\000\026\005" +
    "\174\015\175\016\173\021\172\031\201\053\206\054\202" +
    "\055\205\067\207\072\200\001\002\000\026\005\174\015" +
    "\175\016\173\021\172\031\201\053\206\054\202\055\205" +
    "\067\207\072\200\001\002\000\026\005\174\015\175\016" +
    "\173\021\172\031\201\053\206\054\202\055\205\067\207" +
    "\072\200\001\002\000\026\005\174\015\175\016\173\021" +
    "\172\031\201\053\206\054\202\055\205\067\207\072\200" +
    "\001\002\000\026\005\174\015\175\016\173\021\172\031" +
    "\201\053\206\054\202\055\205\067\207\072\200\001\002" +
    "\000\026\005\174\015\175\016\173\021\172\031\201\053" +
    "\206\054\202\055\205\067\207\072\200\001\002\000\026" +
    "\005\174\015\175\016\173\021\172\031\201\053\206\054" +
    "\202\055\205\067\207\072\200\001\002\000\026\005\174" +
    "\015\175\016\173\021\172\031\201\053\206\054\202\055" +
    "\205\067\207\072\200\001\002\000\026\005\174\015\175" +
    "\016\173\021\172\031\201\053\206\054\202\055\205\067" +
    "\207\072\200\001\002\000\026\005\174\015\175\016\173" +
    "\021\172\031\201\053\206\054\202\055\205\067\207\072" +
    "\200\001\002\000\026\005\174\015\175\016\173\021\172" +
    "\031\201\053\206\054\202\055\205\067\207\072\200\001" +
    "\002\000\026\005\174\015\175\016\173\021\172\031\201" +
    "\053\206\054\202\055\205\067\207\072\200\001\002\000" +
    "\026\005\174\015\175\016\173\021\172\031\201\053\206" +
    "\054\202\055\205\067\207\072\200\001\002\000\026\005" +
    "\174\015\175\016\173\021\172\031\201\053\206\054\202" +
    "\055\205\067\207\072\200\001\002\000\046\004\uffb2\006" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\032\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\056\uffb2\062\uffb2\001\002\000\046\004\uffaf" +
    "\006\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\032" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\056\uffaf\062\uffaf\001\002\000\046\004" +
    "\uffb0\006\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\032\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\056\uffb0\062\uffb0\001\002\000\046" +
    "\004\uffb7\006\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\032\uffb7\041\212\042\220\043\214\044\226\045\215" +
    "\046\224\047\225\050\211\056\222\062\uffb7\001\002\000" +
    "\046\004\uffb6\006\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\032\uffb6\041\212\042\220\043\214\044\226\045" +
    "\215\046\224\047\225\050\211\056\222\062\uffb6\001\002" +
    "\000\046\004\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\032\223\041\212\042\220\043\214\044\226" +
    "\045\215\046\224\047\225\050\211\056\222\062\uffb8\001" +
    "\002\000\046\004\uffb3\006\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\032\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\056\uffb3\062\uffb3" +
    "\001\002\000\046\004\uffbb\006\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\013\216\014\221\032\223\041\212\042\220\043\214" +
    "\044\226\045\215\046\224\047\225\050\211\056\222\062" +
    "\uffbb\001\002\000\046\004\uffb9\006\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\032\223\041\212\042\220\043" +
    "\214\044\226\045\215\046\224\047\225\050\211\056\222" +
    "\062\uffb9\001\002\000\046\004\uffb1\006\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\032\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\056" +
    "\uffb1\062\uffb1\001\002\000\046\004\uffb4\006\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\032\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\056\uffb4\062\uffb4\001\002\000\046\004\uffba\006\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\216\014\221\032\223\041\212" +
    "\042\220\043\214\044\226\045\215\046\224\047\225\050" +
    "\211\056\222\062\uffba\001\002\000\046\004\uffb5\006\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\032\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\056\uffb5\062\uffb5\001\002\000\046\004\uffae\006" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\032\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\uffae\056\uffae\062\uffae\001\002\000\004\004\246" +
    "\001\002\000\052\020\uffe3\024\uffe3\026\uffe3\030\uffe3\031" +
    "\uffe3\033\uffe3\051\uffe3\053\uffe3\054\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\063\uffe3\065\uffe3\066\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\001\002\000\040\006\250\011\217" +
    "\012\213\013\216\014\221\032\223\041\212\042\220\043" +
    "\214\044\226\045\215\046\224\047\225\050\211\056\222" +
    "\001\002\000\046\004\uffbc\006\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\032\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\056\uffbc\062" +
    "\uffbc\001\002\000\026\005\174\015\175\016\173\021\172" +
    "\031\201\053\206\054\202\055\205\067\207\072\200\001" +
    "\002\000\040\006\253\011\217\012\213\013\216\014\221" +
    "\032\223\041\212\042\220\043\214\044\226\045\215\046" +
    "\224\047\225\050\211\056\222\001\002\000\004\027\254" +
    "\001\002\000\044\020\uffe0\024\uffe0\026\uffe0\031\uffe0\033" +
    "\uffe0\051\uffe0\053\uffe0\054\uffe0\057\uffe0\061\uffe0\065\uffe0" +
    "\066\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\001" +
    "\002\000\044\020\052\024\057\026\103\031\060\033\075" +
    "\051\050\053\074\054\045\057\042\061\071\065\101\066" +
    "\102\070\047\071\066\072\046\073\070\074\064\001\002" +
    "\000\046\020\052\024\057\026\103\030\257\031\060\033" +
    "\075\051\050\053\074\054\045\057\042\061\071\065\101" +
    "\066\102\070\047\071\066\072\046\073\070\074\064\001" +
    "\002\000\054\020\uffdf\024\uffdf\026\uffdf\030\uffdf\031\uffdf" +
    "\033\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\063\uffdf\065\uffdf\066\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\001\002\000\052\020\ufff0\024" +
    "\ufff0\026\ufff0\030\ufff0\031\ufff0\033\ufff0\051\ufff0\053\ufff0" +
    "\054\ufff0\057\ufff0\060\ufff0\061\ufff0\063\ufff0\065\ufff0\066" +
    "\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\001\002" +
    "\000\052\020\uffd0\024\uffd0\026\uffd0\030\uffd0\031\uffd0\033" +
    "\uffd0\051\uffd0\053\uffd0\054\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\063\uffd0\065\uffd0\066\uffd0\070\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\074\uffd0\001\002\000\052\020\ufff8\024\ufff8\026\ufff8" +
    "\030\ufff8\031\ufff8\033\ufff8\051\ufff8\053\ufff8\054\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\063\ufff8\065\ufff8\066\ufff8\070\ufff8" +
    "\071\ufff8\072\ufff8\073\ufff8\074\ufff8\001\002\000\052\020" +
    "\ufff6\024\ufff6\026\ufff6\030\ufff6\031\ufff6\033\ufff6\051\ufff6" +
    "\053\ufff6\054\ufff6\057\ufff6\060\ufff6\061\ufff6\063\ufff6\065" +
    "\ufff6\066\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6" +
    "\001\002\000\026\005\174\015\175\016\173\021\172\031" +
    "\201\053\206\054\202\055\205\067\207\072\200\001\002" +
    "\000\040\004\uffe7\011\217\012\213\013\216\014\221\032" +
    "\223\041\212\042\220\043\214\044\226\045\215\046\224" +
    "\047\225\050\211\056\222\001\002\000\004\022\267\001" +
    "\002\000\004\005\270\001\002\000\026\005\174\015\175" +
    "\016\173\021\172\031\201\053\206\054\202\055\205\067" +
    "\207\072\200\001\002\000\040\006\272\011\217\012\213" +
    "\013\216\014\221\032\223\041\212\042\220\043\214\044" +
    "\226\045\215\046\224\047\225\050\211\056\222\001\002" +
    "\000\004\004\uffe9\001\002\000\052\020\ufff7\024\ufff7\026" +
    "\ufff7\030\ufff7\031\ufff7\033\ufff7\051\ufff7\053\ufff7\054\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\063\ufff7\065\ufff7\066\ufff7\070" +
    "\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\001\002\000\040" +
    "\004\uffe8\011\217\012\213\013\216\014\221\032\223\041" +
    "\212\042\220\043\214\044\226\045\215\046\224\047\225" +
    "\050\211\056\222\001\002\000\026\005\174\015\175\016" +
    "\173\021\172\031\201\053\206\054\202\055\205\067\207" +
    "\072\200\001\002\000\040\010\277\011\217\012\213\013" +
    "\216\014\221\032\223\041\212\042\220\043\214\044\226" +
    "\045\215\046\224\047\225\050\211\056\222\001\002\000" +
    "\004\004\uffea\001\002\000\006\027\uffde\033\uffde\001\002" +
    "\000\006\027\306\033\075\001\002\000\052\020\uffdb\024" +
    "\uffdb\026\uffdb\030\uffdb\031\uffdb\033\uffdb\051\uffdb\053\uffdb" +
    "\054\uffdb\057\uffdb\060\uffdb\061\uffdb\063\uffdb\065\uffdb\066" +
    "\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\001\002" +
    "\000\052\020\uffdd\024\uffdd\026\uffdd\030\uffdd\031\uffdd\033" +
    "\uffdd\051\uffdd\053\uffdd\054\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\063\uffdd\065\uffdd\066\uffdd\070\uffdd\071\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\001\002\000\054\020\uffdc\024\uffdc\026\uffdc" +
    "\030\uffdc\031\uffdc\033\uffdc\051\uffdc\052\300\053\uffdc\054" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\063\uffdc\065\uffdc\066\uffdc" +
    "\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\001\002\000" +
    "\052\020\uffda\024\uffda\026\uffda\030\uffda\031\uffda\033\uffda" +
    "\051\uffda\053\uffda\054\uffda\057\uffda\060\uffda\061\uffda\063" +
    "\uffda\065\uffda\066\uffda\070\uffda\071\uffda\072\uffda\073\uffda" +
    "\074\uffda\001\002\000\044\020\uffd9\024\uffd9\026\uffd9\031" +
    "\uffd9\033\uffd9\051\uffd9\053\uffd9\054\uffd9\057\uffd9\061\uffd9" +
    "\065\uffd9\066\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074" +
    "\uffd9\001\002\000\044\020\052\024\057\026\103\031\060" +
    "\033\075\051\050\053\074\054\045\057\042\061\071\065" +
    "\101\066\102\070\047\071\066\072\046\073\070\074\064" +
    "\001\002\000\046\020\052\024\057\026\103\030\311\031" +
    "\060\033\075\051\050\053\074\054\045\057\042\061\071" +
    "\065\101\066\102\070\047\071\066\072\046\073\070\074" +
    "\064\001\002\000\052\020\uffd8\024\uffd8\026\uffd8\030\uffd8" +
    "\031\uffd8\033\uffd8\051\uffd8\053\uffd8\054\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\063\uffd8\065\uffd8\066\uffd8\070\uffd8\071\uffd8" +
    "\072\uffd8\073\uffd8\074\uffd8\001\002\000\026\005\174\015" +
    "\175\016\173\021\172\031\201\053\206\054\202\055\205" +
    "\067\207\072\200\001\002\000\040\006\314\011\217\012" +
    "\213\013\216\014\221\032\223\041\212\042\220\043\214" +
    "\044\226\045\215\046\224\047\225\050\211\056\222\001" +
    "\002\000\004\027\315\001\002\000\044\020\uffe6\024\uffe6" +
    "\026\uffe6\031\uffe6\033\uffe6\051\uffe6\053\uffe6\054\uffe6\057" +
    "\uffe6\061\uffe6\065\uffe6\066\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\001\002\000\044\020\052\024\057\026" +
    "\103\031\060\033\075\051\050\053\074\054\045\057\042" +
    "\061\071\065\101\066\102\070\047\071\066\072\046\073" +
    "\070\074\064\001\002\000\046\020\052\024\057\026\103" +
    "\030\320\031\060\033\075\051\050\053\074\054\045\057" +
    "\042\061\071\065\101\066\102\070\047\071\066\072\046" +
    "\073\070\074\064\001\002\000\052\020\uffe5\024\uffe5\026" +
    "\uffe5\030\uffe5\031\uffe5\033\uffe5\051\uffe5\053\uffe5\054\uffe5" +
    "\057\uffe5\060\uffe5\061\uffe5\063\uffe5\065\uffe5\066\uffe5\070" +
    "\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\001\002\000\004" +
    "\002\ufffc\001\002\000\026\005\174\015\175\016\173\021" +
    "\172\031\201\053\206\054\202\055\205\067\207\072\200" +
    "\001\002\000\040\006\324\011\217\012\213\013\216\014" +
    "\221\032\223\041\212\042\220\043\214\044\226\045\215" +
    "\046\224\047\225\050\211\056\222\001\002\000\004\027" +
    "\325\001\002\000\006\060\uffd7\063\uffd7\001\002\000\006" +
    "\060\330\063\327\001\002\000\004\062\340\001\002\000" +
    "\026\005\174\015\175\016\173\021\172\031\201\053\206" +
    "\054\202\055\205\067\207\072\200\001\002\000\004\030" +
    "\335\001\002\000\044\020\052\024\057\026\103\031\060" +
    "\033\075\051\050\053\074\054\045\057\042\061\071\065" +
    "\101\066\102\070\047\071\066\072\046\073\070\074\064" +
    "\001\002\000\052\020\052\024\057\026\103\030\uffd3\031" +
    "\060\033\075\051\050\053\074\054\045\057\042\060\330" +
    "\061\071\063\327\065\101\066\102\070\047\071\066\072" +
    "\046\073\070\074\064\001\002\000\004\030\uffd4\001\002" +
    "\000\052\020\uffd6\024\uffd6\026\uffd6\030\uffd6\031\uffd6\033" +
    "\uffd6\051\uffd6\053\uffd6\054\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\063\uffd6\065\uffd6\066\uffd6\070\uffd6\071\uffd6\072\uffd6\073" +
    "\uffd6\074\uffd6\001\002\000\040\011\217\012\213\013\216" +
    "\014\221\032\223\041\212\042\220\043\214\044\226\045" +
    "\215\046\224\047\225\050\211\056\222\062\337\001\002" +
    "\000\044\020\uffd5\024\uffd5\026\uffd5\031\uffd5\033\uffd5\051" +
    "\uffd5\053\uffd5\054\uffd5\057\uffd5\061\uffd5\065\uffd5\066\uffd5" +
    "\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\001\002\000" +
    "\044\020\uffd2\024\uffd2\026\uffd2\031\uffd2\033\uffd2\051\uffd2" +
    "\053\uffd2\054\uffd2\057\uffd2\061\uffd2\065\uffd2\066\uffd2\070" +
    "\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\001\002\000\044" +
    "\020\052\024\057\026\103\031\060\033\075\051\050\053" +
    "\074\054\045\057\042\061\071\065\101\066\102\070\047" +
    "\071\066\072\046\073\070\074\064\001\002\000\046\020" +
    "\052\024\057\026\103\030\uffd1\031\060\033\075\051\050" +
    "\053\074\054\045\057\042\061\071\065\101\066\102\070" +
    "\047\071\066\072\046\073\070\074\064\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\012\002\003\017\011\020\004\027\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\012\031" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\024\031\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\043\004\054\006\066\007\053\010\064\011\052\012\050" +
    "\014\075\015\061\021\076\024\042\033\072\034\071\035" +
    "\055\037\060\040\077\043\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\161\006\066\007\053\010" +
    "\064\011\052\012\050\014\075\015\061\021\076\024\042" +
    "\033\072\034\071\035\055\037\060\040\077\043\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\273\013\175\016\203\032\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\157\001\001\000\044\003\160\004\054" +
    "\006\066\007\053\010\064\011\052\012\050\014\075\015" +
    "\061\021\076\024\042\033\072\034\071\035\055\037\060" +
    "\040\077\043\062\001\001\000\042\004\161\006\066\007" +
    "\053\010\064\011\052\012\050\014\075\015\061\021\076" +
    "\024\042\033\072\034\071\035\055\037\060\040\077\043" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\164\001\001\000\044\003\165\004\054\006\066\007" +
    "\053\010\064\011\052\012\050\014\075\015\061\021\076" +
    "\024\042\033\072\034\071\035\055\037\060\040\077\043" +
    "\062\001\001\000\042\004\161\006\066\007\053\010\064" +
    "\011\052\012\050\014\075\015\061\021\076\024\042\033" +
    "\072\034\071\035\055\037\060\040\077\043\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\176\013" +
    "\175\016\203\032\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\246\013\175\016\203\032\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\207\013\175" +
    "\016\203\032\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\243\013\175\016\203" +
    "\032\202\001\001\000\012\005\242\013\175\016\203\032" +
    "\202\001\001\000\012\005\241\013\175\016\203\032\202" +
    "\001\001\000\012\005\240\013\175\016\203\032\202\001" +
    "\001\000\012\005\237\013\175\016\203\032\202\001\001" +
    "\000\012\005\236\013\175\016\203\032\202\001\001\000" +
    "\012\005\235\013\175\016\203\032\202\001\001\000\012" +
    "\005\234\013\175\016\203\032\202\001\001\000\012\005" +
    "\233\013\175\016\203\032\202\001\001\000\012\005\232" +
    "\013\175\016\203\032\202\001\001\000\012\005\231\013" +
    "\175\016\203\032\202\001\001\000\012\005\230\013\175" +
    "\016\203\032\202\001\001\000\012\005\227\013\175\016" +
    "\203\032\202\001\001\000\012\005\226\013\175\016\203" +
    "\032\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\251\013\175\016\203\032\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\254\001\001\000\044" +
    "\003\255\004\054\006\066\007\053\010\064\011\052\012" +
    "\050\014\075\015\061\021\076\024\042\033\072\034\071" +
    "\035\055\037\060\040\077\043\062\001\001\000\042\004" +
    "\161\006\066\007\053\010\064\011\052\012\050\014\075" +
    "\015\061\021\076\024\042\033\072\034\071\035\055\037" +
    "\060\040\077\043\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\264\013\175\016\203\032\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\270\013\175\016\203\032\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\275\013\175\016\203\032\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\300\001" +
    "\001\000\012\012\303\021\304\022\302\023\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\306\001\001\000\044\003\307" +
    "\004\054\006\066\007\053\010\064\011\052\012\050\014" +
    "\075\015\061\021\076\024\042\033\072\034\071\035\055" +
    "\037\060\040\077\043\062\001\001\000\042\004\161\006" +
    "\066\007\053\010\064\011\052\012\050\014\075\015\061" +
    "\021\076\024\042\033\072\034\071\035\055\037\060\040" +
    "\077\043\062\001\001\000\002\001\001\000\012\005\312" +
    "\013\175\016\203\032\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\315\001\001\000\044\003\316" +
    "\004\054\006\066\007\053\010\064\011\052\012\050\014" +
    "\075\015\061\021\076\024\042\033\072\034\071\035\055" +
    "\037\060\040\077\043\062\001\001\000\042\004\161\006" +
    "\066\007\053\010\064\011\052\012\050\014\075\015\061" +
    "\021\076\024\042\033\072\034\071\035\055\037\060\040" +
    "\077\043\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\322\013\175\016\203\032\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\325\001\001" +
    "\000\006\025\330\026\331\001\001\000\002\001\001\000" +
    "\012\005\335\013\175\016\203\032\202\001\001\000\002" +
    "\001\001\000\044\003\332\004\054\006\066\007\053\010" +
    "\064\011\052\012\050\014\075\015\061\021\076\024\042" +
    "\033\072\034\071\035\055\037\060\040\077\043\062\001" +
    "\001\000\046\004\161\006\066\007\053\010\064\011\052" +
    "\012\050\014\075\015\061\021\076\024\042\025\333\026" +
    "\331\033\072\034\071\035\055\037\060\040\077\043\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\340\001\001\000\044" +
    "\003\341\004\054\006\066\007\053\010\064\011\052\012" +
    "\050\014\075\015\061\021\076\024\042\033\072\034\071" +
    "\035\055\037\060\040\077\043\062\001\001\000\042\004" +
    "\161\006\066\007\053\010\064\011\052\012\050\014\075" +
    "\015\061\021\076\024\042\033\072\034\071\035\055\037" +
    "\060\040\077\043\062\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public static HashMap<String, String> mapa = new HashMap<>();
    public static ArrayList<String> Traduccion = new ArrayList<String>();
    public static ArrayList<String> Grafica = new ArrayList<String>();
    public static ArrayList<String> Valores = new ArrayList<String>();
    public static ArrayList<Exception_> erroresSintacticos = new ArrayList<Exception_>(); //ArrayList del los errores sintacticos
    public static String tabuladores = "";
    public static int reduccionDeTabulaciones = 0;
    public static String else_ = "";
    public static String title = "";
    public static String ejex = "";
    public static String ejey = "";


    public void syntax_error(Symbol s){

        erroresSintacticos.add(new Exception_("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= JSON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;

    tabuladores =""; 
    reduccionDeTabulaciones= 0; 
    reduccionDeTabulaciones +=1;
    Traduccion.add("def main: ");
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= VOID MAIN PAR_IZQ NT$0 PAR_DER CHR_IZQ instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= error CHR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= sentencia PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= sumar PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= declaracion PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= vacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= Sentencia_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= INSTANCIA PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= CICLO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= CONBREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= Variables_globales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= BARRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sumar ::= REVALUAR COR_IZQ expresion COR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    //System.out.println("El valor de la expresión es: "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= IMPRIMIR PUNTO WRITE PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Traduccion.add(tabuladores+"print("+a+")");
    //System.out.println("print("+a+")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion ::= tipoDato expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Traduccion.add(tabuladores+b);
    //System.out.println("Declaración encontrada: "+a+" con valor: "+b) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTANCIA ::= ID IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Traduccion.add(tabuladores+a +" = " +b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"while "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    //System.out.println("if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_while ::= ENCICLADO PAR_IZQ expresion PAR_DER CHR_IZQ NT$1 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Object RESULT =null;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"while true");
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DO_WHILE ::= RDO CHR_IZQ NT$2 instrucciones CHR_DER ENCICLADO PAR_IZQ expresion PAR_DER PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"for "+a+" in "+" range "+"("+b+","+c+")");
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CICLO_FOR ::= FOR PAR_IZQ PRUEBA ID comparativa ENTERO PTCOMA ID comparativa ENTERO PTCOMA ID MAS MAS PAR_DER CHR_IZQ NT$3 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_+"if "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= RIF PAR_IZQ expresion PAR_DER CHR_IZQ NT$4 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              Object RESULT =null;

    else_ = "else ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sentencia_else ::= condicion DESIF NT$5 sentencia_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_if ::= condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia_if ::= else_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_if ::= Sentencia_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$6 ::= 
            {
              Object RESULT =null;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // else_simple ::= CHR_IZQ NT$6 instrucciones CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_simple",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"match "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_switch ::= RSWITCH PAR_IZQ expresion PAR_DER CHR_IZQ NT$7 CASES CHR_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASO ::= RCASE expresion DOSPT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Traduccion.add(tabuladores+"case "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASES ::= CASO instrucciones CASES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASES ::= CASO instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$8 ::= 
            {
              Object RESULT =null;
Traduccion.add(tabuladores+"default"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASES ::= DEFECTO DOSPT NT$8 instrucciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONBREAK ::= RBREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONBREAK",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDato ::= REVALUAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDato ::= PRUEBA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDato ::= VARCHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDato ::= VARBOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoDato ::= VARSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipoDato ::= BOOLTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoDato ::= BOOLFAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipoDato ::= VARDOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= VARBOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= BOOLTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= BOOLFAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "+" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operaciones ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "-" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "*" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones ::= expresion DIV expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "/" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones ::= expresion IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "=" + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones ::= expresion COMMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + "," + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comparacion ::= expresion IGUALDAD expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comparacion ::= expresion MAYOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparacion ::= expresion MENOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparacion ::= expresion DIFERENTE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + l + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // logica ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + " or " + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // logica ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a + " and " + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // logica ::= NEGACION expresion 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  " not " + b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparativa ::= IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comparativa ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comparativa ::= MENOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comparativa ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comparativa ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comparativa ::= DIFERENTE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparativa",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // JSON ::= CHR_IZQ sentencias_json CHR_DER 
            {
              Object RESULT =null;
		
System.out.println("HE Recibido un JSON");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencias_json ::= sentencia_json 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_json",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencias_json ::= sentencia_json COMMA sentencias_json 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_json",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia_json ::= TITLE DOSPT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 title = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia_json ::= EJEX DOSPT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ejex = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia_json ::= EJEY DOSPT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ejey = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia_json ::= CADENA DOSPT CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Grafica.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia_json ::= CADENA DOSPT DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Valores.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_json",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // GLOBALES ::= GLOBALM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLOBALES",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // GLOBALES ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLOBALES",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Variables_globales ::= VOID GLOBALES PAR_IZQ PAR_DER CHR_IZQ intrucciones_json CHR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables_globales",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // intrucciones_json ::= VARSTRING ID IGUAL CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 mapa.put(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intrucciones_json",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // intrucciones_json ::= VARDOUBLE ID IGUAL DECIMAL PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 mapa.put(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intrucciones_json",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BARRAS ::= VOID GBARRAS PAR_IZQ PAR_DER CHR_IZQ CHR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BARRAS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

package Analizador;
import java_cup.runtime.*;
import Errores.Exception_;
import java.util.ArrayList;
import java.util.HashMap;

//PARSER 
parser code
{://Codigo visible
    HashMap<String, Double> miHashMap = new HashMap<>();
    public static ArrayList<String> Traduccion = new ArrayList<String>();
    public static ArrayList<Exception_> erroresSintacticos = new ArrayList<Exception_>(); //ArrayList del los errores sintacticos
    public static String tabuladores = "";
    public static int reduccionDeTabulaciones = 0;
    public static String else_ = "";

    public void syntax_error(Symbol s){

        erroresSintacticos.add(new Exception_("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right) );
    }
:}

/*  terminales */
terminal String PTCOMA,PAR_IZQ,PAR_DER,COR_IZQ,COR_DER; // mismo nombre en el archivo lexico
terminal String MAS,MENOS,POR,DIV;
terminal String ENTERO;
terminal String DECIMAL;
terminal String UMENOS;                             // para la precedencia para los negativos y no en 
terminal String REVALUAR;
terminal String CADENA;
terminal String WRITE;
terminal String PUNTO;
terminal String IMPRIMIR;
terminal String MAIN;
terminal String VOID;
terminal String CHR_IZQ;
terminal String CHR_DER;
terminal String ID;
terminal String IGUAL;
terminal String RIF;
terminal String nada;
terminal String IGUALDAD, MENOR_QUE,MAYOR_QUE, MENOR_IGUAL, MAYOR_IGUAL, DIFERENTE, OR, AND;
terminal String ENCICLADO;
terminal String COMENTAR;
terminal String EXPRESION;
terminal String DESIF;
terminal String BOOLTRUE,BOOLFAL; 
terminal String COMMA; 
terminal String RSWITCH ,RCASE ,RBREAK, DOSPT, DEFECTO;
terminal TITLE;

//variables
terminal String PRUEBA;
terminal String VARCHAR;
terminal String VARBOOL;
terminal String VARSTRING;
terminal String VARDOUBLE;

//terminal String RDOUBLE,RCHAR,RSTRING,RBOOL;


non terminal ini;                                   // terminales para las transiciones 
non terminal instrucciones;
non terminal instruccion;
non terminal expresion;                      // el Double es el tipo que retorna la expresion 
non terminal sentencia;
non terminal sumar;
non terminal declaracion;
non terminal tipoDato;
non terminal variables;
non terminal condicion;
non terminal comparacion;
non terminal sentencia_while;
non terminal vacio;
non terminal operaciones;
non terminal inicio;
non terminal comentario;
non terminal Sentencia_else;
non terminal Impresion;
non terminal sentencia_if;
non terminal else_simple;
non terminal sentencia_switch;
non terminal CASES;
non terminal CASO;
non terminal JSON;
non terminal sentencias_json;
non terminal compara_if;

precedence left MAS,MENOS;                          // precedencia de operadores 
precedence left POR,DIV;
precedence right UMENOS; 
precedence right COMMA; 


start with ini;                                     // iniciar la gramataica 

//ini::= VOID MAIN PAR_IZQ PAR_DER CHR_IZQ instrucciones CHR_DER;                                // produccion inicial 

ini::= inicio;

inicio ::=  comentario
    | JSON
    | VOID MAIN PAR_IZQ PAR_DER CHR_IZQ instrucciones CHR_DER
    
;


instrucciones ::= instrucciones instruccion
 | instruccion
; 

instruccion ::= sentencia PTCOMA
   | sumar PTCOMA
   | declaracion PTCOMA
   | condicion
   | sentencia_while
   | vacio
   | Sentencia_else
   | comentario
   | nada
   | sentencia_switch
      
;

sumar::= REVALUAR COR_IZQ expresion:a COR_DER 
{:
    //System.out.println("El valor de la expresión es: "+a);
:}
    ;

sentencia::= IMPRIMIR PUNTO WRITE PAR_IZQ Impresion:a PAR_DER 
{:
    Traduccion.add(tabuladores+"print("+a+")");
    //System.out.println("print("+a+")");
:}
    ;

//DECLARACION VARIABLES
declaracion::= tipoDato ID:a IGUAL Impresion:b
{:
    Traduccion.add(tabuladores+a +" = " +b);
    //System.out.println("Declaración encontrada: "+a+" con valor: "+b) ;
:}
;


//SENTENCIA WHILE

sentencia_while::= ENCICLADO PAR_IZQ variables:a comparacion:b variables:c PAR_DER CHR_IZQ
{:
    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+"while "+a+ " " +b+ " " +c);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    //System.out.println("if "+a+ " " +b+ " " +c) ;
:}
 instrucciones CHR_DER 
{:
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;
:}
;


//SENTENCIA IF
compara_if ::= Impresion;


condicion::= RIF PAR_IZQ variables:a comparacion:b variables:c PAR_DER CHR_IZQ 
{:
    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_+"if "+a+ " " +b+ " " +c);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;
:}
 instrucciones CHR_DER 
{:
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;
:}
;

Sentencia_else::= condicion DESIF {:
    else_ = "else ";
:} 
sentencia_if
{:
    
:};

sentencia_if ::= condicion 
    |else_simple
;

else_simple::= CHR_IZQ
{:
    reduccionDeTabulaciones +=1;
    Traduccion.add(tabuladores+else_);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
    else_ = "";
    //System.out.println(tabuladores+"if "+a+ " " +b+ " " +c) ;
:}
 instrucciones CHR_DER 
{:
    else_ = "";
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;
:}
;
//



//SETENCIA SWITCH
sentencia_switch ::= RSWITCH PAR_IZQ Impresion:a PAR_DER CHR_IZQ
{:
    reduccionDeTabulaciones +=1;
    Traduccion.add("match "+a);
    tabuladores = "\t".repeat(reduccionDeTabulaciones);
:}
CASES CHR_DER{:
    tabuladores = tabuladores.replaceFirst("\t", "");
    reduccionDeTabulaciones -=1;
:};

CASO::= RCASE variables:a DOSPT{:
    Traduccion.add("case "+a);
:}
;

CASES ::=
    CASO  instrucciones RBREAK PTCOMA CASES
    | CASO instrucciones RBREAK PTCOMA
    //| DEFECTO instrucciones RBREAK PTCOMA
;


comentario ::= COMENTAR;

expresion  ::=  
    expresion:a MAS        expresion:b     {:RESULT= a +"+"+ b;:}
 |  expresion:a MENOS      expresion:b     {:RESULT=a +"-"+b;:}
 |  expresion:a POR        expresion:b     {:RESULT=a+"*"+b;:}
 |  expresion:a DIV   expresion:b          {:RESULT=a+"/"+b;:}
 |  ENTERO:a                               {:RESULT=a;:}
 |  DECIMAL:a                              {:RESULT=a;:}
 |  PAR_IZQ expresion:a PAR_DER            {:RESULT=a;:}     
;

variables::=  
 CADENA:a {: RESULT = a;:}
| ID:a {: RESULT = a;:}
| expresion:a {: RESULT = a;:}
//| ENTERO:a {: RESULT = a;:}
;


tipoDato::=
 REVALUAR:a   {: RESULT = a; :}
| PRUEBA:a    {: RESULT = a; :}
| VARCHAR:a   {: RESULT = a; :}
| VARBOOL:a   {: RESULT = a; :}
| VARSTRING:a {: RESULT = a; :}
| BOOLTRUE:a  {: RESULT = a; :}
| BOOLFAL:a   {: RESULT = a; :}
| VARDOUBLE:a {: RESULT = a; :}
;


comparacion::=
 IGUALDAD:a     {: RESULT = a; :}
| MENOR_QUE:a   {: RESULT = a; :}
| MAYOR_QUE:a   {: RESULT = a; :}
| MENOR_IGUAL:a {: RESULT = a; :}
| MAYOR_IGUAL:a {: RESULT = a; :}
| DIFERENTE:a   {: RESULT = a;:}
| OR            {: RESULT = "or";:}            
| AND           {: RESULT = "and";:}
| PAR_IZQ expresion:a PAR_DER            {:RESULT=a;:}
| Impresion     
;

Impresion  ::=  
    Impresion:a MAS  Impresion:b  {:RESULT= a +"+"+ b;:}
 |  Impresion:a MENOS      Impresion:b     {:RESULT=a +"-"+b;:}
 |  Impresion:a POR        Impresion:b     {:RESULT=a+"*"+b;:}
 |  Impresion:a DIV   Impresion:b          {:RESULT=a+"/"+b;:}
 |  ENTERO:b                      {:RESULT=b;:}
 |  DECIMAL:b                     {:RESULT=b;:}    
 |  ID:b                          {:RESULT=b;:}  
 |  CADENA:a                      {: RESULT = a;:}

;

JSON::= CHR_IZQ sentencias_json CHR_DER  {:
System.out.println("HE Recibido un JSON");
:};

sentencias_json::= TITLE DOSPT CADENA;




nada::=;

/*
Definición de regla:

expresion ::= ...: Esta línea indica que estás definiendo una regla llamada expresion. Cada regla tiene uno o más patrones que deben coincidir con ciertas estructuras en la entrada.
Operadores y Expresiones:

Las líneas siguientes representan diferentes patrones de expresiones que pueden ser reconocidos y evaluados.
Cada patrón consiste en un operador (como MAS, MENOS, POR, DIV) seguido de una expresión a y posiblemente una segunda expresión b.
Después de los patrones, hay una acción entre { ... } que se ejecuta cuando el patrón coincide. Esta acción define cómo se debe evaluar la expresión y proporciona el resultado utilizando :RESULT.
Precedencia de Operadores:

%prec UMENOS se usa para asignar una precedencia específica al operador MENOS. Esto asegura que la expresión UMENOS tenga una precedencia menor que otros operadores, como la suma y la resta.
Números:

Las líneas que comienzan con ENTERO:a y DECIMAL:a representan patrones para reconocer números enteros y decimales en la entrada. La acción convierte estos números en objetos Double para su posterior manipulación.
Paréntesis:

La línea PAR_IZQ expresion:a PAR_DER reconoce una expresión encerrada entre paréntesis. La acción simplemente devuelve el valor de la expresión a.
*/